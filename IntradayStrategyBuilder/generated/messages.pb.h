// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#ifndef PROTOBUF_INCLUDED_messages_2eproto
#define PROTOBUF_INCLUDED_messages_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_messages_2eproto 

namespace protobuf_messages_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[15];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_messages_2eproto
class BasicMessage;
class BasicMessageDefaultTypeInternal;
extern BasicMessageDefaultTypeInternal _BasicMessage_default_instance_;
class Confirmation;
class ConfirmationDefaultTypeInternal;
extern ConfirmationDefaultTypeInternal _Confirmation_default_instance_;
class FiveSecData;
class FiveSecDataDefaultTypeInternal;
extern FiveSecDataDefaultTypeInternal _FiveSecData_default_instance_;
class ISBAction;
class ISBActionDefaultTypeInternal;
extern ISBActionDefaultTypeInternal _ISBAction_default_instance_;
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class NewsEvent;
class NewsEventDefaultTypeInternal;
extern NewsEventDefaultTypeInternal _NewsEvent_default_instance_;
class OneMinData;
class OneMinDataDefaultTypeInternal;
extern OneMinDataDefaultTypeInternal _OneMinData_default_instance_;
class OptionData;
class OptionDataDefaultTypeInternal;
extern OptionDataDefaultTypeInternal _OptionData_default_instance_;
class OptionDataBatch;
class OptionDataBatchDefaultTypeInternal;
extern OptionDataBatchDefaultTypeInternal _OptionDataBatch_default_instance_;
class TickData;
class TickDataDefaultTypeInternal;
extern TickDataDefaultTypeInternal _TickData_default_instance_;
class TimeAndSalesData;
class TimeAndSalesDataDefaultTypeInternal;
extern TimeAndSalesDataDefaultTypeInternal _TimeAndSalesData_default_instance_;
class UnderlyingAverages;
class UnderlyingAveragesDefaultTypeInternal;
extern UnderlyingAveragesDefaultTypeInternal _UnderlyingAverages_default_instance_;
class UnderlyingContract;
class UnderlyingContractDefaultTypeInternal;
extern UnderlyingContractDefaultTypeInternal _UnderlyingContract_default_instance_;
class UnderlyingOneMinData;
class UnderlyingOneMinDataDefaultTypeInternal;
extern UnderlyingOneMinDataDefaultTypeInternal _UnderlyingOneMinData_default_instance_;
class UnderlyingPriceTick;
class UnderlyingPriceTickDefaultTypeInternal;
extern UnderlyingPriceTickDefaultTypeInternal _UnderlyingPriceTick_default_instance_;
namespace google {
namespace protobuf {
template<> ::BasicMessage* Arena::CreateMaybeMessage<::BasicMessage>(Arena*);
template<> ::Confirmation* Arena::CreateMaybeMessage<::Confirmation>(Arena*);
template<> ::FiveSecData* Arena::CreateMaybeMessage<::FiveSecData>(Arena*);
template<> ::ISBAction* Arena::CreateMaybeMessage<::ISBAction>(Arena*);
template<> ::Message* Arena::CreateMaybeMessage<::Message>(Arena*);
template<> ::NewsEvent* Arena::CreateMaybeMessage<::NewsEvent>(Arena*);
template<> ::OneMinData* Arena::CreateMaybeMessage<::OneMinData>(Arena*);
template<> ::OptionData* Arena::CreateMaybeMessage<::OptionData>(Arena*);
template<> ::OptionDataBatch* Arena::CreateMaybeMessage<::OptionDataBatch>(Arena*);
template<> ::TickData* Arena::CreateMaybeMessage<::TickData>(Arena*);
template<> ::TimeAndSalesData* Arena::CreateMaybeMessage<::TimeAndSalesData>(Arena*);
template<> ::UnderlyingAverages* Arena::CreateMaybeMessage<::UnderlyingAverages>(Arena*);
template<> ::UnderlyingContract* Arena::CreateMaybeMessage<::UnderlyingContract>(Arena*);
template<> ::UnderlyingOneMinData* Arena::CreateMaybeMessage<::UnderlyingOneMinData>(Arena*);
template<> ::UnderlyingPriceTick* Arena::CreateMaybeMessage<::UnderlyingPriceTick>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class Message : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Message) */ {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(Message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Message& default_instance();

  enum PayloadCase {
    kBasicMessage = 2,
    kConfirmation = 3,
    kIsbAction = 4,
    kOptionData = 5,
    kUnderlyingContract = 6,
    kNews = 7,
    PAYLOAD_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Message* other);
  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return CreateMaybeMessage<Message>(NULL);
  }

  Message* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // .BasicMessage basic_message = 2;
  bool has_basic_message() const;
  void clear_basic_message();
  static const int kBasicMessageFieldNumber = 2;
  private:
  const ::BasicMessage& _internal_basic_message() const;
  public:
  const ::BasicMessage& basic_message() const;
  ::BasicMessage* release_basic_message();
  ::BasicMessage* mutable_basic_message();
  void set_allocated_basic_message(::BasicMessage* basic_message);

  // .Confirmation confirmation = 3;
  bool has_confirmation() const;
  void clear_confirmation();
  static const int kConfirmationFieldNumber = 3;
  private:
  const ::Confirmation& _internal_confirmation() const;
  public:
  const ::Confirmation& confirmation() const;
  ::Confirmation* release_confirmation();
  ::Confirmation* mutable_confirmation();
  void set_allocated_confirmation(::Confirmation* confirmation);

  // .ISBAction isb_action = 4;
  bool has_isb_action() const;
  void clear_isb_action();
  static const int kIsbActionFieldNumber = 4;
  private:
  const ::ISBAction& _internal_isb_action() const;
  public:
  const ::ISBAction& isb_action() const;
  ::ISBAction* release_isb_action();
  ::ISBAction* mutable_isb_action();
  void set_allocated_isb_action(::ISBAction* isb_action);

  // .OptionData option_data = 5;
  bool has_option_data() const;
  void clear_option_data();
  static const int kOptionDataFieldNumber = 5;
  private:
  const ::OptionData& _internal_option_data() const;
  public:
  const ::OptionData& option_data() const;
  ::OptionData* release_option_data();
  ::OptionData* mutable_option_data();
  void set_allocated_option_data(::OptionData* option_data);

  // .UnderlyingContract underlying_contract = 6;
  bool has_underlying_contract() const;
  void clear_underlying_contract();
  static const int kUnderlyingContractFieldNumber = 6;
  private:
  const ::UnderlyingContract& _internal_underlying_contract() const;
  public:
  const ::UnderlyingContract& underlying_contract() const;
  ::UnderlyingContract* release_underlying_contract();
  ::UnderlyingContract* mutable_underlying_contract();
  void set_allocated_underlying_contract(::UnderlyingContract* underlying_contract);

  // .NewsEvent news = 7;
  bool has_news() const;
  void clear_news();
  static const int kNewsFieldNumber = 7;
  private:
  const ::NewsEvent& _internal_news() const;
  public:
  const ::NewsEvent& news() const;
  ::NewsEvent* release_news();
  ::NewsEvent* mutable_news();
  void set_allocated_news(::NewsEvent* news);

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:Message)
 private:
  void set_has_basic_message();
  void set_has_confirmation();
  void set_has_isb_action();
  void set_has_option_data();
  void set_has_underlying_contract();
  void set_has_news();

  inline bool has_payload() const;
  inline void clear_has_payload();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  union PayloadUnion {
    PayloadUnion() {}
    ::BasicMessage* basic_message_;
    ::Confirmation* confirmation_;
    ::ISBAction* isb_action_;
    ::OptionData* option_data_;
    ::UnderlyingContract* underlying_contract_;
    ::NewsEvent* news_;
  } payload_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_messages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BasicMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BasicMessage) */ {
 public:
  BasicMessage();
  virtual ~BasicMessage();

  BasicMessage(const BasicMessage& from);

  inline BasicMessage& operator=(const BasicMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BasicMessage(BasicMessage&& from) noexcept
    : BasicMessage() {
    *this = ::std::move(from);
  }

  inline BasicMessage& operator=(BasicMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BasicMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BasicMessage* internal_default_instance() {
    return reinterpret_cast<const BasicMessage*>(
               &_BasicMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(BasicMessage* other);
  friend void swap(BasicMessage& a, BasicMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BasicMessage* New() const final {
    return CreateMaybeMessage<BasicMessage>(NULL);
  }

  BasicMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BasicMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BasicMessage& from);
  void MergeFrom(const BasicMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BasicMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 1;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:BasicMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_messages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Confirmation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Confirmation) */ {
 public:
  Confirmation();
  virtual ~Confirmation();

  Confirmation(const Confirmation& from);

  inline Confirmation& operator=(const Confirmation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Confirmation(Confirmation&& from) noexcept
    : Confirmation() {
    *this = ::std::move(from);
  }

  inline Confirmation& operator=(Confirmation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Confirmation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Confirmation* internal_default_instance() {
    return reinterpret_cast<const Confirmation*>(
               &_Confirmation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Confirmation* other);
  friend void swap(Confirmation& a, Confirmation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Confirmation* New() const final {
    return CreateMaybeMessage<Confirmation>(NULL);
  }

  Confirmation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Confirmation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Confirmation& from);
  void MergeFrom(const Confirmation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Confirmation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string action = 1;
  void clear_action();
  static const int kActionFieldNumber = 1;
  const ::std::string& action() const;
  void set_action(const ::std::string& value);
  #if LANG_CXX11
  void set_action(::std::string&& value);
  #endif
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  ::std::string* mutable_action();
  ::std::string* release_action();
  void set_allocated_action(::std::string* action);

  // string status = 2;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  const ::std::string& status() const;
  void set_status(const ::std::string& value);
  #if LANG_CXX11
  void set_status(::std::string&& value);
  #endif
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  ::std::string* mutable_status();
  ::std::string* release_status();
  void set_allocated_status(::std::string* status);

  // @@protoc_insertion_point(class_scope:Confirmation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr action_;
  ::google::protobuf::internal::ArenaStringPtr status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_messages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ISBAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ISBAction) */ {
 public:
  ISBAction();
  virtual ~ISBAction();

  ISBAction(const ISBAction& from);

  inline ISBAction& operator=(const ISBAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ISBAction(ISBAction&& from) noexcept
    : ISBAction() {
    *this = ::std::move(from);
  }

  inline ISBAction& operator=(ISBAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ISBAction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ISBAction* internal_default_instance() {
    return reinterpret_cast<const ISBAction*>(
               &_ISBAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ISBAction* other);
  friend void swap(ISBAction& a, ISBAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ISBAction* New() const final {
    return CreateMaybeMessage<ISBAction>(NULL);
  }

  ISBAction* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ISBAction>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ISBAction& from);
  void MergeFrom(const ISBAction& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ISBAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string component = 1;
  void clear_component();
  static const int kComponentFieldNumber = 1;
  const ::std::string& component() const;
  void set_component(const ::std::string& value);
  #if LANG_CXX11
  void set_component(::std::string&& value);
  #endif
  void set_component(const char* value);
  void set_component(const char* value, size_t size);
  ::std::string* mutable_component();
  ::std::string* release_component();
  void set_allocated_component(::std::string* component);

  // string action = 2;
  void clear_action();
  static const int kActionFieldNumber = 2;
  const ::std::string& action() const;
  void set_action(const ::std::string& value);
  #if LANG_CXX11
  void set_action(::std::string&& value);
  #endif
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  ::std::string* mutable_action();
  ::std::string* release_action();
  void set_allocated_action(::std::string* action);

  // string data = 3;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:ISBAction)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr component_;
  ::google::protobuf::internal::ArenaStringPtr action_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_messages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TimeAndSalesData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TimeAndSalesData) */ {
 public:
  TimeAndSalesData();
  virtual ~TimeAndSalesData();

  TimeAndSalesData(const TimeAndSalesData& from);

  inline TimeAndSalesData& operator=(const TimeAndSalesData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TimeAndSalesData(TimeAndSalesData&& from) noexcept
    : TimeAndSalesData() {
    *this = ::std::move(from);
  }

  inline TimeAndSalesData& operator=(TimeAndSalesData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TimeAndSalesData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimeAndSalesData* internal_default_instance() {
    return reinterpret_cast<const TimeAndSalesData*>(
               &_TimeAndSalesData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(TimeAndSalesData* other);
  friend void swap(TimeAndSalesData& a, TimeAndSalesData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TimeAndSalesData* New() const final {
    return CreateMaybeMessage<TimeAndSalesData>(NULL);
  }

  TimeAndSalesData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TimeAndSalesData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TimeAndSalesData& from);
  void MergeFrom(const TimeAndSalesData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeAndSalesData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string current_rtm = 8;
  void clear_current_rtm();
  static const int kCurrentRtmFieldNumber = 8;
  const ::std::string& current_rtm() const;
  void set_current_rtm(const ::std::string& value);
  #if LANG_CXX11
  void set_current_rtm(::std::string&& value);
  #endif
  void set_current_rtm(const char* value);
  void set_current_rtm(const char* value, size_t size);
  ::std::string* mutable_current_rtm();
  ::std::string* release_current_rtm();
  void set_allocated_current_rtm(::std::string* current_rtm);

  // int64 timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // double price = 2;
  void clear_price();
  static const int kPriceFieldNumber = 2;
  double price() const;
  void set_price(double value);

  // double quantity = 3;
  void clear_quantity();
  static const int kQuantityFieldNumber = 3;
  double quantity() const;
  void set_quantity(double value);

  // double total_volume = 4;
  void clear_total_volume();
  static const int kTotalVolumeFieldNumber = 4;
  double total_volume() const;
  void set_total_volume(double value);

  // double vwap = 5;
  void clear_vwap();
  static const int kVwapFieldNumber = 5;
  double vwap() const;
  void set_vwap(double value);

  // double current_ask = 6;
  void clear_current_ask();
  static const int kCurrentAskFieldNumber = 6;
  double current_ask() const;
  void set_current_ask(double value);

  // double current_bid = 7;
  void clear_current_bid();
  static const int kCurrentBidFieldNumber = 7;
  double current_bid() const;
  void set_current_bid(double value);

  // @@protoc_insertion_point(class_scope:TimeAndSalesData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr current_rtm_;
  ::google::protobuf::int64 timestamp_;
  double price_;
  double quantity_;
  double total_volume_;
  double vwap_;
  double current_ask_;
  double current_bid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_messages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TickData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TickData) */ {
 public:
  TickData();
  virtual ~TickData();

  TickData(const TickData& from);

  inline TickData& operator=(const TickData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TickData(TickData&& from) noexcept
    : TickData() {
    *this = ::std::move(from);
  }

  inline TickData& operator=(TickData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TickData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TickData* internal_default_instance() {
    return reinterpret_cast<const TickData*>(
               &_TickData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(TickData* other);
  friend void swap(TickData& a, TickData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TickData* New() const final {
    return CreateMaybeMessage<TickData>(NULL);
  }

  TickData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TickData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TickData& from);
  void MergeFrom(const TickData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TickData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // double bid_price = 2;
  void clear_bid_price();
  static const int kBidPriceFieldNumber = 2;
  double bid_price() const;
  void set_bid_price(double value);

  // double bid_size = 3;
  void clear_bid_size();
  static const int kBidSizeFieldNumber = 3;
  double bid_size() const;
  void set_bid_size(double value);

  // double ask_price = 4;
  void clear_ask_price();
  static const int kAskPriceFieldNumber = 4;
  double ask_price() const;
  void set_ask_price(double value);

  // double ask_size = 5;
  void clear_ask_size();
  static const int kAskSizeFieldNumber = 5;
  double ask_size() const;
  void set_ask_size(double value);

  // double last_price = 6;
  void clear_last_price();
  static const int kLastPriceFieldNumber = 6;
  double last_price() const;
  void set_last_price(double value);

  // double mark_price = 7;
  void clear_mark_price();
  static const int kMarkPriceFieldNumber = 7;
  double mark_price() const;
  void set_mark_price(double value);

  // double volume = 8;
  void clear_volume();
  static const int kVolumeFieldNumber = 8;
  double volume() const;
  void set_volume(double value);

  // double implied_vol = 9;
  void clear_implied_vol();
  static const int kImpliedVolFieldNumber = 9;
  double implied_vol() const;
  void set_implied_vol(double value);

  // double delta = 10;
  void clear_delta();
  static const int kDeltaFieldNumber = 10;
  double delta() const;
  void set_delta(double value);

  // double gamma = 11;
  void clear_gamma();
  static const int kGammaFieldNumber = 11;
  double gamma() const;
  void set_gamma(double value);

  // double vega = 12;
  void clear_vega();
  static const int kVegaFieldNumber = 12;
  double vega() const;
  void set_vega(double value);

  // double theta = 13;
  void clear_theta();
  static const int kThetaFieldNumber = 13;
  double theta() const;
  void set_theta(double value);

  // @@protoc_insertion_point(class_scope:TickData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 timestamp_;
  double bid_price_;
  double bid_size_;
  double ask_price_;
  double ask_size_;
  double last_price_;
  double mark_price_;
  double volume_;
  double implied_vol_;
  double delta_;
  double gamma_;
  double vega_;
  double theta_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_messages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FiveSecData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FiveSecData) */ {
 public:
  FiveSecData();
  virtual ~FiveSecData();

  FiveSecData(const FiveSecData& from);

  inline FiveSecData& operator=(const FiveSecData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FiveSecData(FiveSecData&& from) noexcept
    : FiveSecData() {
    *this = ::std::move(from);
  }

  inline FiveSecData& operator=(FiveSecData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FiveSecData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FiveSecData* internal_default_instance() {
    return reinterpret_cast<const FiveSecData*>(
               &_FiveSecData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(FiveSecData* other);
  friend void swap(FiveSecData& a, FiveSecData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FiveSecData* New() const final {
    return CreateMaybeMessage<FiveSecData>(NULL);
  }

  FiveSecData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FiveSecData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FiveSecData& from);
  void MergeFrom(const FiveSecData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FiveSecData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string volume = 6;
  void clear_volume();
  static const int kVolumeFieldNumber = 6;
  const ::std::string& volume() const;
  void set_volume(const ::std::string& value);
  #if LANG_CXX11
  void set_volume(::std::string&& value);
  #endif
  void set_volume(const char* value);
  void set_volume(const char* value, size_t size);
  ::std::string* mutable_volume();
  ::std::string* release_volume();
  void set_allocated_volume(::std::string* volume);

  // string rtm = 8;
  void clear_rtm();
  static const int kRtmFieldNumber = 8;
  const ::std::string& rtm() const;
  void set_rtm(const ::std::string& value);
  #if LANG_CXX11
  void set_rtm(::std::string&& value);
  #endif
  void set_rtm(const char* value);
  void set_rtm(const char* value, size_t size);
  ::std::string* mutable_rtm();
  ::std::string* release_rtm();
  void set_allocated_rtm(::std::string* rtm);

  // int64 time = 1;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  ::google::protobuf::int64 time() const;
  void set_time(::google::protobuf::int64 value);

  // double open = 2;
  void clear_open();
  static const int kOpenFieldNumber = 2;
  double open() const;
  void set_open(double value);

  // double close = 3;
  void clear_close();
  static const int kCloseFieldNumber = 3;
  double close() const;
  void set_close(double value);

  // double high = 4;
  void clear_high();
  static const int kHighFieldNumber = 4;
  double high() const;
  void set_high(double value);

  // double low = 5;
  void clear_low();
  static const int kLowFieldNumber = 5;
  double low() const;
  void set_low(double value);

  // int32 count = 7;
  void clear_count();
  static const int kCountFieldNumber = 7;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FiveSecData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr volume_;
  ::google::protobuf::internal::ArenaStringPtr rtm_;
  ::google::protobuf::int64 time_;
  double open_;
  double close_;
  double high_;
  double low_;
  ::google::protobuf::int32 count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_messages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OneMinData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:OneMinData) */ {
 public:
  OneMinData();
  virtual ~OneMinData();

  OneMinData(const OneMinData& from);

  inline OneMinData& operator=(const OneMinData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OneMinData(OneMinData&& from) noexcept
    : OneMinData() {
    *this = ::std::move(from);
  }

  inline OneMinData& operator=(OneMinData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OneMinData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OneMinData* internal_default_instance() {
    return reinterpret_cast<const OneMinData*>(
               &_OneMinData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(OneMinData* other);
  friend void swap(OneMinData& a, OneMinData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OneMinData* New() const final {
    return CreateMaybeMessage<OneMinData>(NULL);
  }

  OneMinData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OneMinData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OneMinData& from);
  void MergeFrom(const OneMinData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OneMinData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string rtm = 15;
  void clear_rtm();
  static const int kRtmFieldNumber = 15;
  const ::std::string& rtm() const;
  void set_rtm(const ::std::string& value);
  #if LANG_CXX11
  void set_rtm(::std::string&& value);
  #endif
  void set_rtm(const char* value);
  void set_rtm(const char* value, size_t size);
  ::std::string* mutable_rtm();
  ::std::string* release_rtm();
  void set_allocated_rtm(::std::string* rtm);

  // int64 time = 1;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  ::google::protobuf::int64 time() const;
  void set_time(::google::protobuf::int64 value);

  // double open = 2;
  void clear_open();
  static const int kOpenFieldNumber = 2;
  double open() const;
  void set_open(double value);

  // double close = 3;
  void clear_close();
  static const int kCloseFieldNumber = 3;
  double close() const;
  void set_close(double value);

  // double high = 4;
  void clear_high();
  static const int kHighFieldNumber = 4;
  double high() const;
  void set_high(double value);

  // double low = 5;
  void clear_low();
  static const int kLowFieldNumber = 5;
  double low() const;
  void set_low(double value);

  // double candle_vol = 6;
  void clear_candle_vol();
  static const int kCandleVolFieldNumber = 6;
  double candle_vol() const;
  void set_candle_vol(double value);

  // double trade_count = 7;
  void clear_trade_count();
  static const int kTradeCountFieldNumber = 7;
  double trade_count() const;
  void set_trade_count(double value);

  // double implied_vol = 8;
  void clear_implied_vol();
  static const int kImpliedVolFieldNumber = 8;
  double implied_vol() const;
  void set_implied_vol(double value);

  // double delta = 9;
  void clear_delta();
  static const int kDeltaFieldNumber = 9;
  double delta() const;
  void set_delta(double value);

  // double gamma = 10;
  void clear_gamma();
  static const int kGammaFieldNumber = 10;
  double gamma() const;
  void set_gamma(double value);

  // double vega = 11;
  void clear_vega();
  static const int kVegaFieldNumber = 11;
  double vega() const;
  void set_vega(double value);

  // double theta = 12;
  void clear_theta();
  static const int kThetaFieldNumber = 12;
  double theta() const;
  void set_theta(double value);

  // double und_price = 13;
  void clear_und_price();
  static const int kUndPriceFieldNumber = 13;
  double und_price() const;
  void set_und_price(double value);

  // double total_vol = 14;
  void clear_total_vol();
  static const int kTotalVolFieldNumber = 14;
  double total_vol() const;
  void set_total_vol(double value);

  // @@protoc_insertion_point(class_scope:OneMinData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr rtm_;
  ::google::protobuf::int64 time_;
  double open_;
  double close_;
  double high_;
  double low_;
  double candle_vol_;
  double trade_count_;
  double implied_vol_;
  double delta_;
  double gamma_;
  double vega_;
  double theta_;
  double und_price_;
  double total_vol_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_messages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OptionData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:OptionData) */ {
 public:
  OptionData();
  virtual ~OptionData();

  OptionData(const OptionData& from);

  inline OptionData& operator=(const OptionData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OptionData(OptionData&& from) noexcept
    : OptionData() {
    *this = ::std::move(from);
  }

  inline OptionData& operator=(OptionData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OptionData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OptionData* internal_default_instance() {
    return reinterpret_cast<const OptionData*>(
               &_OptionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(OptionData* other);
  friend void swap(OptionData& a, OptionData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OptionData* New() const final {
    return CreateMaybeMessage<OptionData>(NULL);
  }

  OptionData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OptionData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OptionData& from);
  void MergeFrom(const OptionData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TickData ticks = 5;
  int ticks_size() const;
  void clear_ticks();
  static const int kTicksFieldNumber = 5;
  ::TickData* mutable_ticks(int index);
  ::google::protobuf::RepeatedPtrField< ::TickData >*
      mutable_ticks();
  const ::TickData& ticks(int index) const;
  ::TickData* add_ticks();
  const ::google::protobuf::RepeatedPtrField< ::TickData >&
      ticks() const;

  // repeated .FiveSecData five_sec_data = 6;
  int five_sec_data_size() const;
  void clear_five_sec_data();
  static const int kFiveSecDataFieldNumber = 6;
  ::FiveSecData* mutable_five_sec_data(int index);
  ::google::protobuf::RepeatedPtrField< ::FiveSecData >*
      mutable_five_sec_data();
  const ::FiveSecData& five_sec_data(int index) const;
  ::FiveSecData* add_five_sec_data();
  const ::google::protobuf::RepeatedPtrField< ::FiveSecData >&
      five_sec_data() const;

  // repeated .OneMinData one_min_data = 7;
  int one_min_data_size() const;
  void clear_one_min_data();
  static const int kOneMinDataFieldNumber = 7;
  ::OneMinData* mutable_one_min_data(int index);
  ::google::protobuf::RepeatedPtrField< ::OneMinData >*
      mutable_one_min_data();
  const ::OneMinData& one_min_data(int index) const;
  ::OneMinData* add_one_min_data();
  const ::google::protobuf::RepeatedPtrField< ::OneMinData >&
      one_min_data() const;

  // repeated .TimeAndSalesData tas = 8;
  int tas_size() const;
  void clear_tas();
  static const int kTasFieldNumber = 8;
  ::TimeAndSalesData* mutable_tas(int index);
  ::google::protobuf::RepeatedPtrField< ::TimeAndSalesData >*
      mutable_tas();
  const ::TimeAndSalesData& tas(int index) const;
  ::TimeAndSalesData* add_tas();
  const ::google::protobuf::RepeatedPtrField< ::TimeAndSalesData >&
      tas() const;

  // string symbol = 1;
  void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  const ::std::string& symbol() const;
  void set_symbol(const ::std::string& value);
  #if LANG_CXX11
  void set_symbol(::std::string&& value);
  #endif
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  ::std::string* mutable_symbol();
  ::std::string* release_symbol();
  void set_allocated_symbol(::std::string* symbol);

  // string right = 3;
  void clear_right();
  static const int kRightFieldNumber = 3;
  const ::std::string& right() const;
  void set_right(const ::std::string& value);
  #if LANG_CXX11
  void set_right(::std::string&& value);
  #endif
  void set_right(const char* value);
  void set_right(const char* value, size_t size);
  ::std::string* mutable_right();
  ::std::string* release_right();
  void set_allocated_right(::std::string* right);

  // string exp_date = 4;
  void clear_exp_date();
  static const int kExpDateFieldNumber = 4;
  const ::std::string& exp_date() const;
  void set_exp_date(const ::std::string& value);
  #if LANG_CXX11
  void set_exp_date(::std::string&& value);
  #endif
  void set_exp_date(const char* value);
  void set_exp_date(const char* value, size_t size);
  ::std::string* mutable_exp_date();
  ::std::string* release_exp_date();
  void set_allocated_exp_date(::std::string* exp_date);

  // double strike = 2;
  void clear_strike();
  static const int kStrikeFieldNumber = 2;
  double strike() const;
  void set_strike(double value);

  // @@protoc_insertion_point(class_scope:OptionData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::TickData > ticks_;
  ::google::protobuf::RepeatedPtrField< ::FiveSecData > five_sec_data_;
  ::google::protobuf::RepeatedPtrField< ::OneMinData > one_min_data_;
  ::google::protobuf::RepeatedPtrField< ::TimeAndSalesData > tas_;
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  ::google::protobuf::internal::ArenaStringPtr right_;
  ::google::protobuf::internal::ArenaStringPtr exp_date_;
  double strike_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_messages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OptionDataBatch : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:OptionDataBatch) */ {
 public:
  OptionDataBatch();
  virtual ~OptionDataBatch();

  OptionDataBatch(const OptionDataBatch& from);

  inline OptionDataBatch& operator=(const OptionDataBatch& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OptionDataBatch(OptionDataBatch&& from) noexcept
    : OptionDataBatch() {
    *this = ::std::move(from);
  }

  inline OptionDataBatch& operator=(OptionDataBatch&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OptionDataBatch& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OptionDataBatch* internal_default_instance() {
    return reinterpret_cast<const OptionDataBatch*>(
               &_OptionDataBatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(OptionDataBatch* other);
  friend void swap(OptionDataBatch& a, OptionDataBatch& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OptionDataBatch* New() const final {
    return CreateMaybeMessage<OptionDataBatch>(NULL);
  }

  OptionDataBatch* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OptionDataBatch>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OptionDataBatch& from);
  void MergeFrom(const OptionDataBatch& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionDataBatch* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .OptionData optionDataPoints = 1;
  int optiondatapoints_size() const;
  void clear_optiondatapoints();
  static const int kOptionDataPointsFieldNumber = 1;
  ::OptionData* mutable_optiondatapoints(int index);
  ::google::protobuf::RepeatedPtrField< ::OptionData >*
      mutable_optiondatapoints();
  const ::OptionData& optiondatapoints(int index) const;
  ::OptionData* add_optiondatapoints();
  const ::google::protobuf::RepeatedPtrField< ::OptionData >&
      optiondatapoints() const;

  // @@protoc_insertion_point(class_scope:OptionDataBatch)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::OptionData > optiondatapoints_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_messages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UnderlyingPriceTick : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:UnderlyingPriceTick) */ {
 public:
  UnderlyingPriceTick();
  virtual ~UnderlyingPriceTick();

  UnderlyingPriceTick(const UnderlyingPriceTick& from);

  inline UnderlyingPriceTick& operator=(const UnderlyingPriceTick& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UnderlyingPriceTick(UnderlyingPriceTick&& from) noexcept
    : UnderlyingPriceTick() {
    *this = ::std::move(from);
  }

  inline UnderlyingPriceTick& operator=(UnderlyingPriceTick&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnderlyingPriceTick& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnderlyingPriceTick* internal_default_instance() {
    return reinterpret_cast<const UnderlyingPriceTick*>(
               &_UnderlyingPriceTick_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(UnderlyingPriceTick* other);
  friend void swap(UnderlyingPriceTick& a, UnderlyingPriceTick& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UnderlyingPriceTick* New() const final {
    return CreateMaybeMessage<UnderlyingPriceTick>(NULL);
  }

  UnderlyingPriceTick* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UnderlyingPriceTick>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UnderlyingPriceTick& from);
  void MergeFrom(const UnderlyingPriceTick& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnderlyingPriceTick* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 time = 1;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  ::google::protobuf::int64 time() const;
  void set_time(::google::protobuf::int64 value);

  // double price = 2;
  void clear_price();
  static const int kPriceFieldNumber = 2;
  double price() const;
  void set_price(double value);

  // @@protoc_insertion_point(class_scope:UnderlyingPriceTick)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 time_;
  double price_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_messages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UnderlyingOneMinData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:UnderlyingOneMinData) */ {
 public:
  UnderlyingOneMinData();
  virtual ~UnderlyingOneMinData();

  UnderlyingOneMinData(const UnderlyingOneMinData& from);

  inline UnderlyingOneMinData& operator=(const UnderlyingOneMinData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UnderlyingOneMinData(UnderlyingOneMinData&& from) noexcept
    : UnderlyingOneMinData() {
    *this = ::std::move(from);
  }

  inline UnderlyingOneMinData& operator=(UnderlyingOneMinData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnderlyingOneMinData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnderlyingOneMinData* internal_default_instance() {
    return reinterpret_cast<const UnderlyingOneMinData*>(
               &_UnderlyingOneMinData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(UnderlyingOneMinData* other);
  friend void swap(UnderlyingOneMinData& a, UnderlyingOneMinData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UnderlyingOneMinData* New() const final {
    return CreateMaybeMessage<UnderlyingOneMinData>(NULL);
  }

  UnderlyingOneMinData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UnderlyingOneMinData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UnderlyingOneMinData& from);
  void MergeFrom(const UnderlyingOneMinData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnderlyingOneMinData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 time = 1;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  ::google::protobuf::int64 time() const;
  void set_time(::google::protobuf::int64 value);

  // double open = 2;
  void clear_open();
  static const int kOpenFieldNumber = 2;
  double open() const;
  void set_open(double value);

  // double high = 3;
  void clear_high();
  static const int kHighFieldNumber = 3;
  double high() const;
  void set_high(double value);

  // double low = 4;
  void clear_low();
  static const int kLowFieldNumber = 4;
  double low() const;
  void set_low(double value);

  // double close = 5;
  void clear_close();
  static const int kCloseFieldNumber = 5;
  double close() const;
  void set_close(double value);

  // double volume = 6;
  void clear_volume();
  static const int kVolumeFieldNumber = 6;
  double volume() const;
  void set_volume(double value);

  // double daily_high = 7;
  void clear_daily_high();
  static const int kDailyHighFieldNumber = 7;
  double daily_high() const;
  void set_daily_high(double value);

  // double daily_low = 8;
  void clear_daily_low();
  static const int kDailyLowFieldNumber = 8;
  double daily_low() const;
  void set_daily_low(double value);

  // double daily_volume = 9;
  void clear_daily_volume();
  static const int kDailyVolumeFieldNumber = 9;
  double daily_volume() const;
  void set_daily_volume(double value);

  // double total_call_volume = 10;
  void clear_total_call_volume();
  static const int kTotalCallVolumeFieldNumber = 10;
  double total_call_volume() const;
  void set_total_call_volume(double value);

  // double total_put_volume = 11;
  void clear_total_put_volume();
  static const int kTotalPutVolumeFieldNumber = 11;
  double total_put_volume() const;
  void set_total_put_volume(double value);

  // double index_future_premium = 12;
  void clear_index_future_premium();
  static const int kIndexFuturePremiumFieldNumber = 12;
  double index_future_premium() const;
  void set_index_future_premium(double value);

  // double total_trade_count = 13;
  void clear_total_trade_count();
  static const int kTotalTradeCountFieldNumber = 13;
  double total_trade_count() const;
  void set_total_trade_count(double value);

  // double one_minute_trade_rate = 14;
  void clear_one_minute_trade_rate();
  static const int kOneMinuteTradeRateFieldNumber = 14;
  double one_minute_trade_rate() const;
  void set_one_minute_trade_rate(double value);

  // double real_time_historical_volatility = 15;
  void clear_real_time_historical_volatility();
  static const int kRealTimeHistoricalVolatilityFieldNumber = 15;
  double real_time_historical_volatility() const;
  void set_real_time_historical_volatility(double value);

  // double option_implied_volatility = 16;
  void clear_option_implied_volatility();
  static const int kOptionImpliedVolatilityFieldNumber = 16;
  double option_implied_volatility() const;
  void set_option_implied_volatility(double value);

  // double call_open_interest = 17;
  void clear_call_open_interest();
  static const int kCallOpenInterestFieldNumber = 17;
  double call_open_interest() const;
  void set_call_open_interest(double value);

  // double put_open_interest = 18;
  void clear_put_open_interest();
  static const int kPutOpenInterestFieldNumber = 18;
  double put_open_interest() const;
  void set_put_open_interest(double value);

  // double futures_open_interest = 19;
  void clear_futures_open_interest();
  static const int kFuturesOpenInterestFieldNumber = 19;
  double futures_open_interest() const;
  void set_futures_open_interest(double value);

  // @@protoc_insertion_point(class_scope:UnderlyingOneMinData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 time_;
  double open_;
  double high_;
  double low_;
  double close_;
  double volume_;
  double daily_high_;
  double daily_low_;
  double daily_volume_;
  double total_call_volume_;
  double total_put_volume_;
  double index_future_premium_;
  double total_trade_count_;
  double one_minute_trade_rate_;
  double real_time_historical_volatility_;
  double option_implied_volatility_;
  double call_open_interest_;
  double put_open_interest_;
  double futures_open_interest_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_messages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UnderlyingAverages : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:UnderlyingAverages) */ {
 public:
  UnderlyingAverages();
  virtual ~UnderlyingAverages();

  UnderlyingAverages(const UnderlyingAverages& from);

  inline UnderlyingAverages& operator=(const UnderlyingAverages& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UnderlyingAverages(UnderlyingAverages&& from) noexcept
    : UnderlyingAverages() {
    *this = ::std::move(from);
  }

  inline UnderlyingAverages& operator=(UnderlyingAverages&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnderlyingAverages& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnderlyingAverages* internal_default_instance() {
    return reinterpret_cast<const UnderlyingAverages*>(
               &_UnderlyingAverages_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(UnderlyingAverages* other);
  friend void swap(UnderlyingAverages& a, UnderlyingAverages& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UnderlyingAverages* New() const final {
    return CreateMaybeMessage<UnderlyingAverages>(NULL);
  }

  UnderlyingAverages* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UnderlyingAverages>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UnderlyingAverages& from);
  void MergeFrom(const UnderlyingAverages& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnderlyingAverages* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double low_13_week = 1;
  void clear_low_13_week();
  static const int kLow13WeekFieldNumber = 1;
  double low_13_week() const;
  void set_low_13_week(double value);

  // double high_13_week = 2;
  void clear_high_13_week();
  static const int kHigh13WeekFieldNumber = 2;
  double high_13_week() const;
  void set_high_13_week(double value);

  // double low_26_week = 3;
  void clear_low_26_week();
  static const int kLow26WeekFieldNumber = 3;
  double low_26_week() const;
  void set_low_26_week(double value);

  // double high_26_week = 4;
  void clear_high_26_week();
  static const int kHigh26WeekFieldNumber = 4;
  double high_26_week() const;
  void set_high_26_week(double value);

  // double low_52_week = 5;
  void clear_low_52_week();
  static const int kLow52WeekFieldNumber = 5;
  double low_52_week() const;
  void set_low_52_week(double value);

  // double high_52_week = 6;
  void clear_high_52_week();
  static const int kHigh52WeekFieldNumber = 6;
  double high_52_week() const;
  void set_high_52_week(double value);

  // double average_volume_90_day = 7;
  void clear_average_volume_90_day();
  static const int kAverageVolume90DayFieldNumber = 7;
  double average_volume_90_day() const;
  void set_average_volume_90_day(double value);

  // @@protoc_insertion_point(class_scope:UnderlyingAverages)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double low_13_week_;
  double high_13_week_;
  double low_26_week_;
  double high_26_week_;
  double low_52_week_;
  double high_52_week_;
  double average_volume_90_day_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_messages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UnderlyingContract : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:UnderlyingContract) */ {
 public:
  UnderlyingContract();
  virtual ~UnderlyingContract();

  UnderlyingContract(const UnderlyingContract& from);

  inline UnderlyingContract& operator=(const UnderlyingContract& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UnderlyingContract(UnderlyingContract&& from) noexcept
    : UnderlyingContract() {
    *this = ::std::move(from);
  }

  inline UnderlyingContract& operator=(UnderlyingContract&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnderlyingContract& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnderlyingContract* internal_default_instance() {
    return reinterpret_cast<const UnderlyingContract*>(
               &_UnderlyingContract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(UnderlyingContract* other);
  friend void swap(UnderlyingContract& a, UnderlyingContract& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UnderlyingContract* New() const final {
    return CreateMaybeMessage<UnderlyingContract>(NULL);
  }

  UnderlyingContract* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UnderlyingContract>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UnderlyingContract& from);
  void MergeFrom(const UnderlyingContract& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnderlyingContract* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .UnderlyingOneMinData underlying_one_min = 2;
  int underlying_one_min_size() const;
  void clear_underlying_one_min();
  static const int kUnderlyingOneMinFieldNumber = 2;
  ::UnderlyingOneMinData* mutable_underlying_one_min(int index);
  ::google::protobuf::RepeatedPtrField< ::UnderlyingOneMinData >*
      mutable_underlying_one_min();
  const ::UnderlyingOneMinData& underlying_one_min(int index) const;
  ::UnderlyingOneMinData* add_underlying_one_min();
  const ::google::protobuf::RepeatedPtrField< ::UnderlyingOneMinData >&
      underlying_one_min() const;

  // repeated .UnderlyingAverages underlying_averages = 3;
  int underlying_averages_size() const;
  void clear_underlying_averages();
  static const int kUnderlyingAveragesFieldNumber = 3;
  ::UnderlyingAverages* mutable_underlying_averages(int index);
  ::google::protobuf::RepeatedPtrField< ::UnderlyingAverages >*
      mutable_underlying_averages();
  const ::UnderlyingAverages& underlying_averages(int index) const;
  ::UnderlyingAverages* add_underlying_averages();
  const ::google::protobuf::RepeatedPtrField< ::UnderlyingAverages >&
      underlying_averages() const;

  // repeated .UnderlyingPriceTick underlying_price_tick = 4;
  int underlying_price_tick_size() const;
  void clear_underlying_price_tick();
  static const int kUnderlyingPriceTickFieldNumber = 4;
  ::UnderlyingPriceTick* mutable_underlying_price_tick(int index);
  ::google::protobuf::RepeatedPtrField< ::UnderlyingPriceTick >*
      mutable_underlying_price_tick();
  const ::UnderlyingPriceTick& underlying_price_tick(int index) const;
  ::UnderlyingPriceTick* add_underlying_price_tick();
  const ::google::protobuf::RepeatedPtrField< ::UnderlyingPriceTick >&
      underlying_price_tick() const;

  // string symbol = 1;
  void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  const ::std::string& symbol() const;
  void set_symbol(const ::std::string& value);
  #if LANG_CXX11
  void set_symbol(::std::string&& value);
  #endif
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  ::std::string* mutable_symbol();
  ::std::string* release_symbol();
  void set_allocated_symbol(::std::string* symbol);

  // @@protoc_insertion_point(class_scope:UnderlyingContract)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::UnderlyingOneMinData > underlying_one_min_;
  ::google::protobuf::RepeatedPtrField< ::UnderlyingAverages > underlying_averages_;
  ::google::protobuf::RepeatedPtrField< ::UnderlyingPriceTick > underlying_price_tick_;
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_messages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NewsEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NewsEvent) */ {
 public:
  NewsEvent();
  virtual ~NewsEvent();

  NewsEvent(const NewsEvent& from);

  inline NewsEvent& operator=(const NewsEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NewsEvent(NewsEvent&& from) noexcept
    : NewsEvent() {
    *this = ::std::move(from);
  }

  inline NewsEvent& operator=(NewsEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NewsEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NewsEvent* internal_default_instance() {
    return reinterpret_cast<const NewsEvent*>(
               &_NewsEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(NewsEvent* other);
  friend void swap(NewsEvent& a, NewsEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NewsEvent* New() const final {
    return CreateMaybeMessage<NewsEvent>(NULL);
  }

  NewsEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NewsEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NewsEvent& from);
  void MergeFrom(const NewsEvent& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewsEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string article_id = 2;
  void clear_article_id();
  static const int kArticleIdFieldNumber = 2;
  const ::std::string& article_id() const;
  void set_article_id(const ::std::string& value);
  #if LANG_CXX11
  void set_article_id(::std::string&& value);
  #endif
  void set_article_id(const char* value);
  void set_article_id(const char* value, size_t size);
  ::std::string* mutable_article_id();
  ::std::string* release_article_id();
  void set_allocated_article_id(::std::string* article_id);

  // string headline = 3;
  void clear_headline();
  static const int kHeadlineFieldNumber = 3;
  const ::std::string& headline() const;
  void set_headline(const ::std::string& value);
  #if LANG_CXX11
  void set_headline(::std::string&& value);
  #endif
  void set_headline(const char* value);
  void set_headline(const char* value, size_t size);
  ::std::string* mutable_headline();
  ::std::string* release_headline();
  void set_allocated_headline(::std::string* headline);

  // int64 time = 1;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  ::google::protobuf::int64 time() const;
  void set_time(::google::protobuf::int64 value);

  // double sentiment_score = 4;
  void clear_sentiment_score();
  static const int kSentimentScoreFieldNumber = 4;
  double sentiment_score() const;
  void set_sentiment_score(double value);

  // @@protoc_insertion_point(class_scope:NewsEvent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr article_id_;
  ::google::protobuf::internal::ArenaStringPtr headline_;
  ::google::protobuf::int64 time_;
  double sentiment_score_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_messages_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Message

// string type = 1;
inline void Message::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Message::type() const {
  // @@protoc_insertion_point(field_get:Message.type)
  return type_.GetNoArena();
}
inline void Message::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Message.type)
}
#if LANG_CXX11
inline void Message::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Message.type)
}
#endif
inline void Message::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Message.type)
}
inline void Message::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Message.type)
}
inline ::std::string* Message::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:Message.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Message::release_type() {
  // @@protoc_insertion_point(field_release:Message.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:Message.type)
}

// .BasicMessage basic_message = 2;
inline bool Message::has_basic_message() const {
  return payload_case() == kBasicMessage;
}
inline void Message::set_has_basic_message() {
  _oneof_case_[0] = kBasicMessage;
}
inline void Message::clear_basic_message() {
  if (has_basic_message()) {
    delete payload_.basic_message_;
    clear_has_payload();
  }
}
inline const ::BasicMessage& Message::_internal_basic_message() const {
  return *payload_.basic_message_;
}
inline ::BasicMessage* Message::release_basic_message() {
  // @@protoc_insertion_point(field_release:Message.basic_message)
  if (has_basic_message()) {
    clear_has_payload();
      ::BasicMessage* temp = payload_.basic_message_;
    payload_.basic_message_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::BasicMessage& Message::basic_message() const {
  // @@protoc_insertion_point(field_get:Message.basic_message)
  return has_basic_message()
      ? *payload_.basic_message_
      : *reinterpret_cast< ::BasicMessage*>(&::_BasicMessage_default_instance_);
}
inline ::BasicMessage* Message::mutable_basic_message() {
  if (!has_basic_message()) {
    clear_payload();
    set_has_basic_message();
    payload_.basic_message_ = CreateMaybeMessage< ::BasicMessage >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Message.basic_message)
  return payload_.basic_message_;
}

// .Confirmation confirmation = 3;
inline bool Message::has_confirmation() const {
  return payload_case() == kConfirmation;
}
inline void Message::set_has_confirmation() {
  _oneof_case_[0] = kConfirmation;
}
inline void Message::clear_confirmation() {
  if (has_confirmation()) {
    delete payload_.confirmation_;
    clear_has_payload();
  }
}
inline const ::Confirmation& Message::_internal_confirmation() const {
  return *payload_.confirmation_;
}
inline ::Confirmation* Message::release_confirmation() {
  // @@protoc_insertion_point(field_release:Message.confirmation)
  if (has_confirmation()) {
    clear_has_payload();
      ::Confirmation* temp = payload_.confirmation_;
    payload_.confirmation_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::Confirmation& Message::confirmation() const {
  // @@protoc_insertion_point(field_get:Message.confirmation)
  return has_confirmation()
      ? *payload_.confirmation_
      : *reinterpret_cast< ::Confirmation*>(&::_Confirmation_default_instance_);
}
inline ::Confirmation* Message::mutable_confirmation() {
  if (!has_confirmation()) {
    clear_payload();
    set_has_confirmation();
    payload_.confirmation_ = CreateMaybeMessage< ::Confirmation >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Message.confirmation)
  return payload_.confirmation_;
}

// .ISBAction isb_action = 4;
inline bool Message::has_isb_action() const {
  return payload_case() == kIsbAction;
}
inline void Message::set_has_isb_action() {
  _oneof_case_[0] = kIsbAction;
}
inline void Message::clear_isb_action() {
  if (has_isb_action()) {
    delete payload_.isb_action_;
    clear_has_payload();
  }
}
inline const ::ISBAction& Message::_internal_isb_action() const {
  return *payload_.isb_action_;
}
inline ::ISBAction* Message::release_isb_action() {
  // @@protoc_insertion_point(field_release:Message.isb_action)
  if (has_isb_action()) {
    clear_has_payload();
      ::ISBAction* temp = payload_.isb_action_;
    payload_.isb_action_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ISBAction& Message::isb_action() const {
  // @@protoc_insertion_point(field_get:Message.isb_action)
  return has_isb_action()
      ? *payload_.isb_action_
      : *reinterpret_cast< ::ISBAction*>(&::_ISBAction_default_instance_);
}
inline ::ISBAction* Message::mutable_isb_action() {
  if (!has_isb_action()) {
    clear_payload();
    set_has_isb_action();
    payload_.isb_action_ = CreateMaybeMessage< ::ISBAction >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Message.isb_action)
  return payload_.isb_action_;
}

// .OptionData option_data = 5;
inline bool Message::has_option_data() const {
  return payload_case() == kOptionData;
}
inline void Message::set_has_option_data() {
  _oneof_case_[0] = kOptionData;
}
inline void Message::clear_option_data() {
  if (has_option_data()) {
    delete payload_.option_data_;
    clear_has_payload();
  }
}
inline const ::OptionData& Message::_internal_option_data() const {
  return *payload_.option_data_;
}
inline ::OptionData* Message::release_option_data() {
  // @@protoc_insertion_point(field_release:Message.option_data)
  if (has_option_data()) {
    clear_has_payload();
      ::OptionData* temp = payload_.option_data_;
    payload_.option_data_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::OptionData& Message::option_data() const {
  // @@protoc_insertion_point(field_get:Message.option_data)
  return has_option_data()
      ? *payload_.option_data_
      : *reinterpret_cast< ::OptionData*>(&::_OptionData_default_instance_);
}
inline ::OptionData* Message::mutable_option_data() {
  if (!has_option_data()) {
    clear_payload();
    set_has_option_data();
    payload_.option_data_ = CreateMaybeMessage< ::OptionData >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Message.option_data)
  return payload_.option_data_;
}

// .UnderlyingContract underlying_contract = 6;
inline bool Message::has_underlying_contract() const {
  return payload_case() == kUnderlyingContract;
}
inline void Message::set_has_underlying_contract() {
  _oneof_case_[0] = kUnderlyingContract;
}
inline void Message::clear_underlying_contract() {
  if (has_underlying_contract()) {
    delete payload_.underlying_contract_;
    clear_has_payload();
  }
}
inline const ::UnderlyingContract& Message::_internal_underlying_contract() const {
  return *payload_.underlying_contract_;
}
inline ::UnderlyingContract* Message::release_underlying_contract() {
  // @@protoc_insertion_point(field_release:Message.underlying_contract)
  if (has_underlying_contract()) {
    clear_has_payload();
      ::UnderlyingContract* temp = payload_.underlying_contract_;
    payload_.underlying_contract_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::UnderlyingContract& Message::underlying_contract() const {
  // @@protoc_insertion_point(field_get:Message.underlying_contract)
  return has_underlying_contract()
      ? *payload_.underlying_contract_
      : *reinterpret_cast< ::UnderlyingContract*>(&::_UnderlyingContract_default_instance_);
}
inline ::UnderlyingContract* Message::mutable_underlying_contract() {
  if (!has_underlying_contract()) {
    clear_payload();
    set_has_underlying_contract();
    payload_.underlying_contract_ = CreateMaybeMessage< ::UnderlyingContract >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Message.underlying_contract)
  return payload_.underlying_contract_;
}

// .NewsEvent news = 7;
inline bool Message::has_news() const {
  return payload_case() == kNews;
}
inline void Message::set_has_news() {
  _oneof_case_[0] = kNews;
}
inline void Message::clear_news() {
  if (has_news()) {
    delete payload_.news_;
    clear_has_payload();
  }
}
inline const ::NewsEvent& Message::_internal_news() const {
  return *payload_.news_;
}
inline ::NewsEvent* Message::release_news() {
  // @@protoc_insertion_point(field_release:Message.news)
  if (has_news()) {
    clear_has_payload();
      ::NewsEvent* temp = payload_.news_;
    payload_.news_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::NewsEvent& Message::news() const {
  // @@protoc_insertion_point(field_get:Message.news)
  return has_news()
      ? *payload_.news_
      : *reinterpret_cast< ::NewsEvent*>(&::_NewsEvent_default_instance_);
}
inline ::NewsEvent* Message::mutable_news() {
  if (!has_news()) {
    clear_payload();
    set_has_news();
    payload_.news_ = CreateMaybeMessage< ::NewsEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Message.news)
  return payload_.news_;
}

inline bool Message::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void Message::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline Message::PayloadCase Message::payload_case() const {
  return Message::PayloadCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// BasicMessage

// string message = 1;
inline void BasicMessage::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BasicMessage::message() const {
  // @@protoc_insertion_point(field_get:BasicMessage.message)
  return message_.GetNoArena();
}
inline void BasicMessage::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BasicMessage.message)
}
#if LANG_CXX11
inline void BasicMessage::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BasicMessage.message)
}
#endif
inline void BasicMessage::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BasicMessage.message)
}
inline void BasicMessage::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BasicMessage.message)
}
inline ::std::string* BasicMessage::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:BasicMessage.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BasicMessage::release_message() {
  // @@protoc_insertion_point(field_release:BasicMessage.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BasicMessage::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:BasicMessage.message)
}

// -------------------------------------------------------------------

// Confirmation

// string action = 1;
inline void Confirmation::clear_action() {
  action_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Confirmation::action() const {
  // @@protoc_insertion_point(field_get:Confirmation.action)
  return action_.GetNoArena();
}
inline void Confirmation::set_action(const ::std::string& value) {
  
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Confirmation.action)
}
#if LANG_CXX11
inline void Confirmation::set_action(::std::string&& value) {
  
  action_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Confirmation.action)
}
#endif
inline void Confirmation::set_action(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Confirmation.action)
}
inline void Confirmation::set_action(const char* value, size_t size) {
  
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Confirmation.action)
}
inline ::std::string* Confirmation::mutable_action() {
  
  // @@protoc_insertion_point(field_mutable:Confirmation.action)
  return action_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Confirmation::release_action() {
  // @@protoc_insertion_point(field_release:Confirmation.action)
  
  return action_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Confirmation::set_allocated_action(::std::string* action) {
  if (action != NULL) {
    
  } else {
    
  }
  action_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), action);
  // @@protoc_insertion_point(field_set_allocated:Confirmation.action)
}

// string status = 2;
inline void Confirmation::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Confirmation::status() const {
  // @@protoc_insertion_point(field_get:Confirmation.status)
  return status_.GetNoArena();
}
inline void Confirmation::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Confirmation.status)
}
#if LANG_CXX11
inline void Confirmation::set_status(::std::string&& value) {
  
  status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Confirmation.status)
}
#endif
inline void Confirmation::set_status(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Confirmation.status)
}
inline void Confirmation::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Confirmation.status)
}
inline ::std::string* Confirmation::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:Confirmation.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Confirmation::release_status() {
  // @@protoc_insertion_point(field_release:Confirmation.status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Confirmation::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:Confirmation.status)
}

// -------------------------------------------------------------------

// ISBAction

// string component = 1;
inline void ISBAction::clear_component() {
  component_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ISBAction::component() const {
  // @@protoc_insertion_point(field_get:ISBAction.component)
  return component_.GetNoArena();
}
inline void ISBAction::set_component(const ::std::string& value) {
  
  component_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ISBAction.component)
}
#if LANG_CXX11
inline void ISBAction::set_component(::std::string&& value) {
  
  component_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ISBAction.component)
}
#endif
inline void ISBAction::set_component(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  component_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ISBAction.component)
}
inline void ISBAction::set_component(const char* value, size_t size) {
  
  component_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ISBAction.component)
}
inline ::std::string* ISBAction::mutable_component() {
  
  // @@protoc_insertion_point(field_mutable:ISBAction.component)
  return component_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ISBAction::release_component() {
  // @@protoc_insertion_point(field_release:ISBAction.component)
  
  return component_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ISBAction::set_allocated_component(::std::string* component) {
  if (component != NULL) {
    
  } else {
    
  }
  component_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), component);
  // @@protoc_insertion_point(field_set_allocated:ISBAction.component)
}

// string action = 2;
inline void ISBAction::clear_action() {
  action_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ISBAction::action() const {
  // @@protoc_insertion_point(field_get:ISBAction.action)
  return action_.GetNoArena();
}
inline void ISBAction::set_action(const ::std::string& value) {
  
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ISBAction.action)
}
#if LANG_CXX11
inline void ISBAction::set_action(::std::string&& value) {
  
  action_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ISBAction.action)
}
#endif
inline void ISBAction::set_action(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ISBAction.action)
}
inline void ISBAction::set_action(const char* value, size_t size) {
  
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ISBAction.action)
}
inline ::std::string* ISBAction::mutable_action() {
  
  // @@protoc_insertion_point(field_mutable:ISBAction.action)
  return action_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ISBAction::release_action() {
  // @@protoc_insertion_point(field_release:ISBAction.action)
  
  return action_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ISBAction::set_allocated_action(::std::string* action) {
  if (action != NULL) {
    
  } else {
    
  }
  action_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), action);
  // @@protoc_insertion_point(field_set_allocated:ISBAction.action)
}

// string data = 3;
inline void ISBAction::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ISBAction::data() const {
  // @@protoc_insertion_point(field_get:ISBAction.data)
  return data_.GetNoArena();
}
inline void ISBAction::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ISBAction.data)
}
#if LANG_CXX11
inline void ISBAction::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ISBAction.data)
}
#endif
inline void ISBAction::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ISBAction.data)
}
inline void ISBAction::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ISBAction.data)
}
inline ::std::string* ISBAction::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:ISBAction.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ISBAction::release_data() {
  // @@protoc_insertion_point(field_release:ISBAction.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ISBAction::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:ISBAction.data)
}

// -------------------------------------------------------------------

// TimeAndSalesData

// int64 timestamp = 1;
inline void TimeAndSalesData::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TimeAndSalesData::timestamp() const {
  // @@protoc_insertion_point(field_get:TimeAndSalesData.timestamp)
  return timestamp_;
}
inline void TimeAndSalesData::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:TimeAndSalesData.timestamp)
}

// double price = 2;
inline void TimeAndSalesData::clear_price() {
  price_ = 0;
}
inline double TimeAndSalesData::price() const {
  // @@protoc_insertion_point(field_get:TimeAndSalesData.price)
  return price_;
}
inline void TimeAndSalesData::set_price(double value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:TimeAndSalesData.price)
}

// double quantity = 3;
inline void TimeAndSalesData::clear_quantity() {
  quantity_ = 0;
}
inline double TimeAndSalesData::quantity() const {
  // @@protoc_insertion_point(field_get:TimeAndSalesData.quantity)
  return quantity_;
}
inline void TimeAndSalesData::set_quantity(double value) {
  
  quantity_ = value;
  // @@protoc_insertion_point(field_set:TimeAndSalesData.quantity)
}

// double total_volume = 4;
inline void TimeAndSalesData::clear_total_volume() {
  total_volume_ = 0;
}
inline double TimeAndSalesData::total_volume() const {
  // @@protoc_insertion_point(field_get:TimeAndSalesData.total_volume)
  return total_volume_;
}
inline void TimeAndSalesData::set_total_volume(double value) {
  
  total_volume_ = value;
  // @@protoc_insertion_point(field_set:TimeAndSalesData.total_volume)
}

// double vwap = 5;
inline void TimeAndSalesData::clear_vwap() {
  vwap_ = 0;
}
inline double TimeAndSalesData::vwap() const {
  // @@protoc_insertion_point(field_get:TimeAndSalesData.vwap)
  return vwap_;
}
inline void TimeAndSalesData::set_vwap(double value) {
  
  vwap_ = value;
  // @@protoc_insertion_point(field_set:TimeAndSalesData.vwap)
}

// double current_ask = 6;
inline void TimeAndSalesData::clear_current_ask() {
  current_ask_ = 0;
}
inline double TimeAndSalesData::current_ask() const {
  // @@protoc_insertion_point(field_get:TimeAndSalesData.current_ask)
  return current_ask_;
}
inline void TimeAndSalesData::set_current_ask(double value) {
  
  current_ask_ = value;
  // @@protoc_insertion_point(field_set:TimeAndSalesData.current_ask)
}

// double current_bid = 7;
inline void TimeAndSalesData::clear_current_bid() {
  current_bid_ = 0;
}
inline double TimeAndSalesData::current_bid() const {
  // @@protoc_insertion_point(field_get:TimeAndSalesData.current_bid)
  return current_bid_;
}
inline void TimeAndSalesData::set_current_bid(double value) {
  
  current_bid_ = value;
  // @@protoc_insertion_point(field_set:TimeAndSalesData.current_bid)
}

// string current_rtm = 8;
inline void TimeAndSalesData::clear_current_rtm() {
  current_rtm_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TimeAndSalesData::current_rtm() const {
  // @@protoc_insertion_point(field_get:TimeAndSalesData.current_rtm)
  return current_rtm_.GetNoArena();
}
inline void TimeAndSalesData::set_current_rtm(const ::std::string& value) {
  
  current_rtm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TimeAndSalesData.current_rtm)
}
#if LANG_CXX11
inline void TimeAndSalesData::set_current_rtm(::std::string&& value) {
  
  current_rtm_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TimeAndSalesData.current_rtm)
}
#endif
inline void TimeAndSalesData::set_current_rtm(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  current_rtm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TimeAndSalesData.current_rtm)
}
inline void TimeAndSalesData::set_current_rtm(const char* value, size_t size) {
  
  current_rtm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TimeAndSalesData.current_rtm)
}
inline ::std::string* TimeAndSalesData::mutable_current_rtm() {
  
  // @@protoc_insertion_point(field_mutable:TimeAndSalesData.current_rtm)
  return current_rtm_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TimeAndSalesData::release_current_rtm() {
  // @@protoc_insertion_point(field_release:TimeAndSalesData.current_rtm)
  
  return current_rtm_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TimeAndSalesData::set_allocated_current_rtm(::std::string* current_rtm) {
  if (current_rtm != NULL) {
    
  } else {
    
  }
  current_rtm_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), current_rtm);
  // @@protoc_insertion_point(field_set_allocated:TimeAndSalesData.current_rtm)
}

// -------------------------------------------------------------------

// TickData

// int64 timestamp = 1;
inline void TickData::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TickData::timestamp() const {
  // @@protoc_insertion_point(field_get:TickData.timestamp)
  return timestamp_;
}
inline void TickData::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:TickData.timestamp)
}

// double bid_price = 2;
inline void TickData::clear_bid_price() {
  bid_price_ = 0;
}
inline double TickData::bid_price() const {
  // @@protoc_insertion_point(field_get:TickData.bid_price)
  return bid_price_;
}
inline void TickData::set_bid_price(double value) {
  
  bid_price_ = value;
  // @@protoc_insertion_point(field_set:TickData.bid_price)
}

// double bid_size = 3;
inline void TickData::clear_bid_size() {
  bid_size_ = 0;
}
inline double TickData::bid_size() const {
  // @@protoc_insertion_point(field_get:TickData.bid_size)
  return bid_size_;
}
inline void TickData::set_bid_size(double value) {
  
  bid_size_ = value;
  // @@protoc_insertion_point(field_set:TickData.bid_size)
}

// double ask_price = 4;
inline void TickData::clear_ask_price() {
  ask_price_ = 0;
}
inline double TickData::ask_price() const {
  // @@protoc_insertion_point(field_get:TickData.ask_price)
  return ask_price_;
}
inline void TickData::set_ask_price(double value) {
  
  ask_price_ = value;
  // @@protoc_insertion_point(field_set:TickData.ask_price)
}

// double ask_size = 5;
inline void TickData::clear_ask_size() {
  ask_size_ = 0;
}
inline double TickData::ask_size() const {
  // @@protoc_insertion_point(field_get:TickData.ask_size)
  return ask_size_;
}
inline void TickData::set_ask_size(double value) {
  
  ask_size_ = value;
  // @@protoc_insertion_point(field_set:TickData.ask_size)
}

// double last_price = 6;
inline void TickData::clear_last_price() {
  last_price_ = 0;
}
inline double TickData::last_price() const {
  // @@protoc_insertion_point(field_get:TickData.last_price)
  return last_price_;
}
inline void TickData::set_last_price(double value) {
  
  last_price_ = value;
  // @@protoc_insertion_point(field_set:TickData.last_price)
}

// double mark_price = 7;
inline void TickData::clear_mark_price() {
  mark_price_ = 0;
}
inline double TickData::mark_price() const {
  // @@protoc_insertion_point(field_get:TickData.mark_price)
  return mark_price_;
}
inline void TickData::set_mark_price(double value) {
  
  mark_price_ = value;
  // @@protoc_insertion_point(field_set:TickData.mark_price)
}

// double volume = 8;
inline void TickData::clear_volume() {
  volume_ = 0;
}
inline double TickData::volume() const {
  // @@protoc_insertion_point(field_get:TickData.volume)
  return volume_;
}
inline void TickData::set_volume(double value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:TickData.volume)
}

// double implied_vol = 9;
inline void TickData::clear_implied_vol() {
  implied_vol_ = 0;
}
inline double TickData::implied_vol() const {
  // @@protoc_insertion_point(field_get:TickData.implied_vol)
  return implied_vol_;
}
inline void TickData::set_implied_vol(double value) {
  
  implied_vol_ = value;
  // @@protoc_insertion_point(field_set:TickData.implied_vol)
}

// double delta = 10;
inline void TickData::clear_delta() {
  delta_ = 0;
}
inline double TickData::delta() const {
  // @@protoc_insertion_point(field_get:TickData.delta)
  return delta_;
}
inline void TickData::set_delta(double value) {
  
  delta_ = value;
  // @@protoc_insertion_point(field_set:TickData.delta)
}

// double gamma = 11;
inline void TickData::clear_gamma() {
  gamma_ = 0;
}
inline double TickData::gamma() const {
  // @@protoc_insertion_point(field_get:TickData.gamma)
  return gamma_;
}
inline void TickData::set_gamma(double value) {
  
  gamma_ = value;
  // @@protoc_insertion_point(field_set:TickData.gamma)
}

// double vega = 12;
inline void TickData::clear_vega() {
  vega_ = 0;
}
inline double TickData::vega() const {
  // @@protoc_insertion_point(field_get:TickData.vega)
  return vega_;
}
inline void TickData::set_vega(double value) {
  
  vega_ = value;
  // @@protoc_insertion_point(field_set:TickData.vega)
}

// double theta = 13;
inline void TickData::clear_theta() {
  theta_ = 0;
}
inline double TickData::theta() const {
  // @@protoc_insertion_point(field_get:TickData.theta)
  return theta_;
}
inline void TickData::set_theta(double value) {
  
  theta_ = value;
  // @@protoc_insertion_point(field_set:TickData.theta)
}

// -------------------------------------------------------------------

// FiveSecData

// int64 time = 1;
inline void FiveSecData::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 FiveSecData::time() const {
  // @@protoc_insertion_point(field_get:FiveSecData.time)
  return time_;
}
inline void FiveSecData::set_time(::google::protobuf::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:FiveSecData.time)
}

// double open = 2;
inline void FiveSecData::clear_open() {
  open_ = 0;
}
inline double FiveSecData::open() const {
  // @@protoc_insertion_point(field_get:FiveSecData.open)
  return open_;
}
inline void FiveSecData::set_open(double value) {
  
  open_ = value;
  // @@protoc_insertion_point(field_set:FiveSecData.open)
}

// double close = 3;
inline void FiveSecData::clear_close() {
  close_ = 0;
}
inline double FiveSecData::close() const {
  // @@protoc_insertion_point(field_get:FiveSecData.close)
  return close_;
}
inline void FiveSecData::set_close(double value) {
  
  close_ = value;
  // @@protoc_insertion_point(field_set:FiveSecData.close)
}

// double high = 4;
inline void FiveSecData::clear_high() {
  high_ = 0;
}
inline double FiveSecData::high() const {
  // @@protoc_insertion_point(field_get:FiveSecData.high)
  return high_;
}
inline void FiveSecData::set_high(double value) {
  
  high_ = value;
  // @@protoc_insertion_point(field_set:FiveSecData.high)
}

// double low = 5;
inline void FiveSecData::clear_low() {
  low_ = 0;
}
inline double FiveSecData::low() const {
  // @@protoc_insertion_point(field_get:FiveSecData.low)
  return low_;
}
inline void FiveSecData::set_low(double value) {
  
  low_ = value;
  // @@protoc_insertion_point(field_set:FiveSecData.low)
}

// string volume = 6;
inline void FiveSecData::clear_volume() {
  volume_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FiveSecData::volume() const {
  // @@protoc_insertion_point(field_get:FiveSecData.volume)
  return volume_.GetNoArena();
}
inline void FiveSecData::set_volume(const ::std::string& value) {
  
  volume_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FiveSecData.volume)
}
#if LANG_CXX11
inline void FiveSecData::set_volume(::std::string&& value) {
  
  volume_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FiveSecData.volume)
}
#endif
inline void FiveSecData::set_volume(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  volume_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FiveSecData.volume)
}
inline void FiveSecData::set_volume(const char* value, size_t size) {
  
  volume_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FiveSecData.volume)
}
inline ::std::string* FiveSecData::mutable_volume() {
  
  // @@protoc_insertion_point(field_mutable:FiveSecData.volume)
  return volume_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FiveSecData::release_volume() {
  // @@protoc_insertion_point(field_release:FiveSecData.volume)
  
  return volume_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FiveSecData::set_allocated_volume(::std::string* volume) {
  if (volume != NULL) {
    
  } else {
    
  }
  volume_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), volume);
  // @@protoc_insertion_point(field_set_allocated:FiveSecData.volume)
}

// int32 count = 7;
inline void FiveSecData::clear_count() {
  count_ = 0;
}
inline ::google::protobuf::int32 FiveSecData::count() const {
  // @@protoc_insertion_point(field_get:FiveSecData.count)
  return count_;
}
inline void FiveSecData::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:FiveSecData.count)
}

// string rtm = 8;
inline void FiveSecData::clear_rtm() {
  rtm_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FiveSecData::rtm() const {
  // @@protoc_insertion_point(field_get:FiveSecData.rtm)
  return rtm_.GetNoArena();
}
inline void FiveSecData::set_rtm(const ::std::string& value) {
  
  rtm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FiveSecData.rtm)
}
#if LANG_CXX11
inline void FiveSecData::set_rtm(::std::string&& value) {
  
  rtm_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FiveSecData.rtm)
}
#endif
inline void FiveSecData::set_rtm(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  rtm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FiveSecData.rtm)
}
inline void FiveSecData::set_rtm(const char* value, size_t size) {
  
  rtm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FiveSecData.rtm)
}
inline ::std::string* FiveSecData::mutable_rtm() {
  
  // @@protoc_insertion_point(field_mutable:FiveSecData.rtm)
  return rtm_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FiveSecData::release_rtm() {
  // @@protoc_insertion_point(field_release:FiveSecData.rtm)
  
  return rtm_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FiveSecData::set_allocated_rtm(::std::string* rtm) {
  if (rtm != NULL) {
    
  } else {
    
  }
  rtm_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rtm);
  // @@protoc_insertion_point(field_set_allocated:FiveSecData.rtm)
}

// -------------------------------------------------------------------

// OneMinData

// int64 time = 1;
inline void OneMinData::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 OneMinData::time() const {
  // @@protoc_insertion_point(field_get:OneMinData.time)
  return time_;
}
inline void OneMinData::set_time(::google::protobuf::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:OneMinData.time)
}

// double open = 2;
inline void OneMinData::clear_open() {
  open_ = 0;
}
inline double OneMinData::open() const {
  // @@protoc_insertion_point(field_get:OneMinData.open)
  return open_;
}
inline void OneMinData::set_open(double value) {
  
  open_ = value;
  // @@protoc_insertion_point(field_set:OneMinData.open)
}

// double close = 3;
inline void OneMinData::clear_close() {
  close_ = 0;
}
inline double OneMinData::close() const {
  // @@protoc_insertion_point(field_get:OneMinData.close)
  return close_;
}
inline void OneMinData::set_close(double value) {
  
  close_ = value;
  // @@protoc_insertion_point(field_set:OneMinData.close)
}

// double high = 4;
inline void OneMinData::clear_high() {
  high_ = 0;
}
inline double OneMinData::high() const {
  // @@protoc_insertion_point(field_get:OneMinData.high)
  return high_;
}
inline void OneMinData::set_high(double value) {
  
  high_ = value;
  // @@protoc_insertion_point(field_set:OneMinData.high)
}

// double low = 5;
inline void OneMinData::clear_low() {
  low_ = 0;
}
inline double OneMinData::low() const {
  // @@protoc_insertion_point(field_get:OneMinData.low)
  return low_;
}
inline void OneMinData::set_low(double value) {
  
  low_ = value;
  // @@protoc_insertion_point(field_set:OneMinData.low)
}

// double candle_vol = 6;
inline void OneMinData::clear_candle_vol() {
  candle_vol_ = 0;
}
inline double OneMinData::candle_vol() const {
  // @@protoc_insertion_point(field_get:OneMinData.candle_vol)
  return candle_vol_;
}
inline void OneMinData::set_candle_vol(double value) {
  
  candle_vol_ = value;
  // @@protoc_insertion_point(field_set:OneMinData.candle_vol)
}

// double trade_count = 7;
inline void OneMinData::clear_trade_count() {
  trade_count_ = 0;
}
inline double OneMinData::trade_count() const {
  // @@protoc_insertion_point(field_get:OneMinData.trade_count)
  return trade_count_;
}
inline void OneMinData::set_trade_count(double value) {
  
  trade_count_ = value;
  // @@protoc_insertion_point(field_set:OneMinData.trade_count)
}

// double implied_vol = 8;
inline void OneMinData::clear_implied_vol() {
  implied_vol_ = 0;
}
inline double OneMinData::implied_vol() const {
  // @@protoc_insertion_point(field_get:OneMinData.implied_vol)
  return implied_vol_;
}
inline void OneMinData::set_implied_vol(double value) {
  
  implied_vol_ = value;
  // @@protoc_insertion_point(field_set:OneMinData.implied_vol)
}

// double delta = 9;
inline void OneMinData::clear_delta() {
  delta_ = 0;
}
inline double OneMinData::delta() const {
  // @@protoc_insertion_point(field_get:OneMinData.delta)
  return delta_;
}
inline void OneMinData::set_delta(double value) {
  
  delta_ = value;
  // @@protoc_insertion_point(field_set:OneMinData.delta)
}

// double gamma = 10;
inline void OneMinData::clear_gamma() {
  gamma_ = 0;
}
inline double OneMinData::gamma() const {
  // @@protoc_insertion_point(field_get:OneMinData.gamma)
  return gamma_;
}
inline void OneMinData::set_gamma(double value) {
  
  gamma_ = value;
  // @@protoc_insertion_point(field_set:OneMinData.gamma)
}

// double vega = 11;
inline void OneMinData::clear_vega() {
  vega_ = 0;
}
inline double OneMinData::vega() const {
  // @@protoc_insertion_point(field_get:OneMinData.vega)
  return vega_;
}
inline void OneMinData::set_vega(double value) {
  
  vega_ = value;
  // @@protoc_insertion_point(field_set:OneMinData.vega)
}

// double theta = 12;
inline void OneMinData::clear_theta() {
  theta_ = 0;
}
inline double OneMinData::theta() const {
  // @@protoc_insertion_point(field_get:OneMinData.theta)
  return theta_;
}
inline void OneMinData::set_theta(double value) {
  
  theta_ = value;
  // @@protoc_insertion_point(field_set:OneMinData.theta)
}

// double und_price = 13;
inline void OneMinData::clear_und_price() {
  und_price_ = 0;
}
inline double OneMinData::und_price() const {
  // @@protoc_insertion_point(field_get:OneMinData.und_price)
  return und_price_;
}
inline void OneMinData::set_und_price(double value) {
  
  und_price_ = value;
  // @@protoc_insertion_point(field_set:OneMinData.und_price)
}

// double total_vol = 14;
inline void OneMinData::clear_total_vol() {
  total_vol_ = 0;
}
inline double OneMinData::total_vol() const {
  // @@protoc_insertion_point(field_get:OneMinData.total_vol)
  return total_vol_;
}
inline void OneMinData::set_total_vol(double value) {
  
  total_vol_ = value;
  // @@protoc_insertion_point(field_set:OneMinData.total_vol)
}

// string rtm = 15;
inline void OneMinData::clear_rtm() {
  rtm_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OneMinData::rtm() const {
  // @@protoc_insertion_point(field_get:OneMinData.rtm)
  return rtm_.GetNoArena();
}
inline void OneMinData::set_rtm(const ::std::string& value) {
  
  rtm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OneMinData.rtm)
}
#if LANG_CXX11
inline void OneMinData::set_rtm(::std::string&& value) {
  
  rtm_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OneMinData.rtm)
}
#endif
inline void OneMinData::set_rtm(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  rtm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OneMinData.rtm)
}
inline void OneMinData::set_rtm(const char* value, size_t size) {
  
  rtm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OneMinData.rtm)
}
inline ::std::string* OneMinData::mutable_rtm() {
  
  // @@protoc_insertion_point(field_mutable:OneMinData.rtm)
  return rtm_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OneMinData::release_rtm() {
  // @@protoc_insertion_point(field_release:OneMinData.rtm)
  
  return rtm_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OneMinData::set_allocated_rtm(::std::string* rtm) {
  if (rtm != NULL) {
    
  } else {
    
  }
  rtm_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rtm);
  // @@protoc_insertion_point(field_set_allocated:OneMinData.rtm)
}

// -------------------------------------------------------------------

// OptionData

// string symbol = 1;
inline void OptionData::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OptionData::symbol() const {
  // @@protoc_insertion_point(field_get:OptionData.symbol)
  return symbol_.GetNoArena();
}
inline void OptionData::set_symbol(const ::std::string& value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OptionData.symbol)
}
#if LANG_CXX11
inline void OptionData::set_symbol(::std::string&& value) {
  
  symbol_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OptionData.symbol)
}
#endif
inline void OptionData::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OptionData.symbol)
}
inline void OptionData::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OptionData.symbol)
}
inline ::std::string* OptionData::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:OptionData.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionData::release_symbol() {
  // @@protoc_insertion_point(field_release:OptionData.symbol)
  
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionData::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:OptionData.symbol)
}

// double strike = 2;
inline void OptionData::clear_strike() {
  strike_ = 0;
}
inline double OptionData::strike() const {
  // @@protoc_insertion_point(field_get:OptionData.strike)
  return strike_;
}
inline void OptionData::set_strike(double value) {
  
  strike_ = value;
  // @@protoc_insertion_point(field_set:OptionData.strike)
}

// string right = 3;
inline void OptionData::clear_right() {
  right_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OptionData::right() const {
  // @@protoc_insertion_point(field_get:OptionData.right)
  return right_.GetNoArena();
}
inline void OptionData::set_right(const ::std::string& value) {
  
  right_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OptionData.right)
}
#if LANG_CXX11
inline void OptionData::set_right(::std::string&& value) {
  
  right_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OptionData.right)
}
#endif
inline void OptionData::set_right(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  right_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OptionData.right)
}
inline void OptionData::set_right(const char* value, size_t size) {
  
  right_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OptionData.right)
}
inline ::std::string* OptionData::mutable_right() {
  
  // @@protoc_insertion_point(field_mutable:OptionData.right)
  return right_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionData::release_right() {
  // @@protoc_insertion_point(field_release:OptionData.right)
  
  return right_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionData::set_allocated_right(::std::string* right) {
  if (right != NULL) {
    
  } else {
    
  }
  right_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), right);
  // @@protoc_insertion_point(field_set_allocated:OptionData.right)
}

// string exp_date = 4;
inline void OptionData::clear_exp_date() {
  exp_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OptionData::exp_date() const {
  // @@protoc_insertion_point(field_get:OptionData.exp_date)
  return exp_date_.GetNoArena();
}
inline void OptionData::set_exp_date(const ::std::string& value) {
  
  exp_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OptionData.exp_date)
}
#if LANG_CXX11
inline void OptionData::set_exp_date(::std::string&& value) {
  
  exp_date_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OptionData.exp_date)
}
#endif
inline void OptionData::set_exp_date(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exp_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OptionData.exp_date)
}
inline void OptionData::set_exp_date(const char* value, size_t size) {
  
  exp_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OptionData.exp_date)
}
inline ::std::string* OptionData::mutable_exp_date() {
  
  // @@protoc_insertion_point(field_mutable:OptionData.exp_date)
  return exp_date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionData::release_exp_date() {
  // @@protoc_insertion_point(field_release:OptionData.exp_date)
  
  return exp_date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionData::set_allocated_exp_date(::std::string* exp_date) {
  if (exp_date != NULL) {
    
  } else {
    
  }
  exp_date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exp_date);
  // @@protoc_insertion_point(field_set_allocated:OptionData.exp_date)
}

// repeated .TickData ticks = 5;
inline int OptionData::ticks_size() const {
  return ticks_.size();
}
inline void OptionData::clear_ticks() {
  ticks_.Clear();
}
inline ::TickData* OptionData::mutable_ticks(int index) {
  // @@protoc_insertion_point(field_mutable:OptionData.ticks)
  return ticks_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TickData >*
OptionData::mutable_ticks() {
  // @@protoc_insertion_point(field_mutable_list:OptionData.ticks)
  return &ticks_;
}
inline const ::TickData& OptionData::ticks(int index) const {
  // @@protoc_insertion_point(field_get:OptionData.ticks)
  return ticks_.Get(index);
}
inline ::TickData* OptionData::add_ticks() {
  // @@protoc_insertion_point(field_add:OptionData.ticks)
  return ticks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TickData >&
OptionData::ticks() const {
  // @@protoc_insertion_point(field_list:OptionData.ticks)
  return ticks_;
}

// repeated .FiveSecData five_sec_data = 6;
inline int OptionData::five_sec_data_size() const {
  return five_sec_data_.size();
}
inline void OptionData::clear_five_sec_data() {
  five_sec_data_.Clear();
}
inline ::FiveSecData* OptionData::mutable_five_sec_data(int index) {
  // @@protoc_insertion_point(field_mutable:OptionData.five_sec_data)
  return five_sec_data_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::FiveSecData >*
OptionData::mutable_five_sec_data() {
  // @@protoc_insertion_point(field_mutable_list:OptionData.five_sec_data)
  return &five_sec_data_;
}
inline const ::FiveSecData& OptionData::five_sec_data(int index) const {
  // @@protoc_insertion_point(field_get:OptionData.five_sec_data)
  return five_sec_data_.Get(index);
}
inline ::FiveSecData* OptionData::add_five_sec_data() {
  // @@protoc_insertion_point(field_add:OptionData.five_sec_data)
  return five_sec_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FiveSecData >&
OptionData::five_sec_data() const {
  // @@protoc_insertion_point(field_list:OptionData.five_sec_data)
  return five_sec_data_;
}

// repeated .OneMinData one_min_data = 7;
inline int OptionData::one_min_data_size() const {
  return one_min_data_.size();
}
inline void OptionData::clear_one_min_data() {
  one_min_data_.Clear();
}
inline ::OneMinData* OptionData::mutable_one_min_data(int index) {
  // @@protoc_insertion_point(field_mutable:OptionData.one_min_data)
  return one_min_data_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::OneMinData >*
OptionData::mutable_one_min_data() {
  // @@protoc_insertion_point(field_mutable_list:OptionData.one_min_data)
  return &one_min_data_;
}
inline const ::OneMinData& OptionData::one_min_data(int index) const {
  // @@protoc_insertion_point(field_get:OptionData.one_min_data)
  return one_min_data_.Get(index);
}
inline ::OneMinData* OptionData::add_one_min_data() {
  // @@protoc_insertion_point(field_add:OptionData.one_min_data)
  return one_min_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::OneMinData >&
OptionData::one_min_data() const {
  // @@protoc_insertion_point(field_list:OptionData.one_min_data)
  return one_min_data_;
}

// repeated .TimeAndSalesData tas = 8;
inline int OptionData::tas_size() const {
  return tas_.size();
}
inline void OptionData::clear_tas() {
  tas_.Clear();
}
inline ::TimeAndSalesData* OptionData::mutable_tas(int index) {
  // @@protoc_insertion_point(field_mutable:OptionData.tas)
  return tas_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TimeAndSalesData >*
OptionData::mutable_tas() {
  // @@protoc_insertion_point(field_mutable_list:OptionData.tas)
  return &tas_;
}
inline const ::TimeAndSalesData& OptionData::tas(int index) const {
  // @@protoc_insertion_point(field_get:OptionData.tas)
  return tas_.Get(index);
}
inline ::TimeAndSalesData* OptionData::add_tas() {
  // @@protoc_insertion_point(field_add:OptionData.tas)
  return tas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TimeAndSalesData >&
OptionData::tas() const {
  // @@protoc_insertion_point(field_list:OptionData.tas)
  return tas_;
}

// -------------------------------------------------------------------

// OptionDataBatch

// repeated .OptionData optionDataPoints = 1;
inline int OptionDataBatch::optiondatapoints_size() const {
  return optiondatapoints_.size();
}
inline void OptionDataBatch::clear_optiondatapoints() {
  optiondatapoints_.Clear();
}
inline ::OptionData* OptionDataBatch::mutable_optiondatapoints(int index) {
  // @@protoc_insertion_point(field_mutable:OptionDataBatch.optionDataPoints)
  return optiondatapoints_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::OptionData >*
OptionDataBatch::mutable_optiondatapoints() {
  // @@protoc_insertion_point(field_mutable_list:OptionDataBatch.optionDataPoints)
  return &optiondatapoints_;
}
inline const ::OptionData& OptionDataBatch::optiondatapoints(int index) const {
  // @@protoc_insertion_point(field_get:OptionDataBatch.optionDataPoints)
  return optiondatapoints_.Get(index);
}
inline ::OptionData* OptionDataBatch::add_optiondatapoints() {
  // @@protoc_insertion_point(field_add:OptionDataBatch.optionDataPoints)
  return optiondatapoints_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::OptionData >&
OptionDataBatch::optiondatapoints() const {
  // @@protoc_insertion_point(field_list:OptionDataBatch.optionDataPoints)
  return optiondatapoints_;
}

// -------------------------------------------------------------------

// UnderlyingPriceTick

// int64 time = 1;
inline void UnderlyingPriceTick::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 UnderlyingPriceTick::time() const {
  // @@protoc_insertion_point(field_get:UnderlyingPriceTick.time)
  return time_;
}
inline void UnderlyingPriceTick::set_time(::google::protobuf::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:UnderlyingPriceTick.time)
}

// double price = 2;
inline void UnderlyingPriceTick::clear_price() {
  price_ = 0;
}
inline double UnderlyingPriceTick::price() const {
  // @@protoc_insertion_point(field_get:UnderlyingPriceTick.price)
  return price_;
}
inline void UnderlyingPriceTick::set_price(double value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:UnderlyingPriceTick.price)
}

// -------------------------------------------------------------------

// UnderlyingOneMinData

// int64 time = 1;
inline void UnderlyingOneMinData::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 UnderlyingOneMinData::time() const {
  // @@protoc_insertion_point(field_get:UnderlyingOneMinData.time)
  return time_;
}
inline void UnderlyingOneMinData::set_time(::google::protobuf::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:UnderlyingOneMinData.time)
}

// double open = 2;
inline void UnderlyingOneMinData::clear_open() {
  open_ = 0;
}
inline double UnderlyingOneMinData::open() const {
  // @@protoc_insertion_point(field_get:UnderlyingOneMinData.open)
  return open_;
}
inline void UnderlyingOneMinData::set_open(double value) {
  
  open_ = value;
  // @@protoc_insertion_point(field_set:UnderlyingOneMinData.open)
}

// double high = 3;
inline void UnderlyingOneMinData::clear_high() {
  high_ = 0;
}
inline double UnderlyingOneMinData::high() const {
  // @@protoc_insertion_point(field_get:UnderlyingOneMinData.high)
  return high_;
}
inline void UnderlyingOneMinData::set_high(double value) {
  
  high_ = value;
  // @@protoc_insertion_point(field_set:UnderlyingOneMinData.high)
}

// double low = 4;
inline void UnderlyingOneMinData::clear_low() {
  low_ = 0;
}
inline double UnderlyingOneMinData::low() const {
  // @@protoc_insertion_point(field_get:UnderlyingOneMinData.low)
  return low_;
}
inline void UnderlyingOneMinData::set_low(double value) {
  
  low_ = value;
  // @@protoc_insertion_point(field_set:UnderlyingOneMinData.low)
}

// double close = 5;
inline void UnderlyingOneMinData::clear_close() {
  close_ = 0;
}
inline double UnderlyingOneMinData::close() const {
  // @@protoc_insertion_point(field_get:UnderlyingOneMinData.close)
  return close_;
}
inline void UnderlyingOneMinData::set_close(double value) {
  
  close_ = value;
  // @@protoc_insertion_point(field_set:UnderlyingOneMinData.close)
}

// double volume = 6;
inline void UnderlyingOneMinData::clear_volume() {
  volume_ = 0;
}
inline double UnderlyingOneMinData::volume() const {
  // @@protoc_insertion_point(field_get:UnderlyingOneMinData.volume)
  return volume_;
}
inline void UnderlyingOneMinData::set_volume(double value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:UnderlyingOneMinData.volume)
}

// double daily_high = 7;
inline void UnderlyingOneMinData::clear_daily_high() {
  daily_high_ = 0;
}
inline double UnderlyingOneMinData::daily_high() const {
  // @@protoc_insertion_point(field_get:UnderlyingOneMinData.daily_high)
  return daily_high_;
}
inline void UnderlyingOneMinData::set_daily_high(double value) {
  
  daily_high_ = value;
  // @@protoc_insertion_point(field_set:UnderlyingOneMinData.daily_high)
}

// double daily_low = 8;
inline void UnderlyingOneMinData::clear_daily_low() {
  daily_low_ = 0;
}
inline double UnderlyingOneMinData::daily_low() const {
  // @@protoc_insertion_point(field_get:UnderlyingOneMinData.daily_low)
  return daily_low_;
}
inline void UnderlyingOneMinData::set_daily_low(double value) {
  
  daily_low_ = value;
  // @@protoc_insertion_point(field_set:UnderlyingOneMinData.daily_low)
}

// double daily_volume = 9;
inline void UnderlyingOneMinData::clear_daily_volume() {
  daily_volume_ = 0;
}
inline double UnderlyingOneMinData::daily_volume() const {
  // @@protoc_insertion_point(field_get:UnderlyingOneMinData.daily_volume)
  return daily_volume_;
}
inline void UnderlyingOneMinData::set_daily_volume(double value) {
  
  daily_volume_ = value;
  // @@protoc_insertion_point(field_set:UnderlyingOneMinData.daily_volume)
}

// double total_call_volume = 10;
inline void UnderlyingOneMinData::clear_total_call_volume() {
  total_call_volume_ = 0;
}
inline double UnderlyingOneMinData::total_call_volume() const {
  // @@protoc_insertion_point(field_get:UnderlyingOneMinData.total_call_volume)
  return total_call_volume_;
}
inline void UnderlyingOneMinData::set_total_call_volume(double value) {
  
  total_call_volume_ = value;
  // @@protoc_insertion_point(field_set:UnderlyingOneMinData.total_call_volume)
}

// double total_put_volume = 11;
inline void UnderlyingOneMinData::clear_total_put_volume() {
  total_put_volume_ = 0;
}
inline double UnderlyingOneMinData::total_put_volume() const {
  // @@protoc_insertion_point(field_get:UnderlyingOneMinData.total_put_volume)
  return total_put_volume_;
}
inline void UnderlyingOneMinData::set_total_put_volume(double value) {
  
  total_put_volume_ = value;
  // @@protoc_insertion_point(field_set:UnderlyingOneMinData.total_put_volume)
}

// double index_future_premium = 12;
inline void UnderlyingOneMinData::clear_index_future_premium() {
  index_future_premium_ = 0;
}
inline double UnderlyingOneMinData::index_future_premium() const {
  // @@protoc_insertion_point(field_get:UnderlyingOneMinData.index_future_premium)
  return index_future_premium_;
}
inline void UnderlyingOneMinData::set_index_future_premium(double value) {
  
  index_future_premium_ = value;
  // @@protoc_insertion_point(field_set:UnderlyingOneMinData.index_future_premium)
}

// double total_trade_count = 13;
inline void UnderlyingOneMinData::clear_total_trade_count() {
  total_trade_count_ = 0;
}
inline double UnderlyingOneMinData::total_trade_count() const {
  // @@protoc_insertion_point(field_get:UnderlyingOneMinData.total_trade_count)
  return total_trade_count_;
}
inline void UnderlyingOneMinData::set_total_trade_count(double value) {
  
  total_trade_count_ = value;
  // @@protoc_insertion_point(field_set:UnderlyingOneMinData.total_trade_count)
}

// double one_minute_trade_rate = 14;
inline void UnderlyingOneMinData::clear_one_minute_trade_rate() {
  one_minute_trade_rate_ = 0;
}
inline double UnderlyingOneMinData::one_minute_trade_rate() const {
  // @@protoc_insertion_point(field_get:UnderlyingOneMinData.one_minute_trade_rate)
  return one_minute_trade_rate_;
}
inline void UnderlyingOneMinData::set_one_minute_trade_rate(double value) {
  
  one_minute_trade_rate_ = value;
  // @@protoc_insertion_point(field_set:UnderlyingOneMinData.one_minute_trade_rate)
}

// double real_time_historical_volatility = 15;
inline void UnderlyingOneMinData::clear_real_time_historical_volatility() {
  real_time_historical_volatility_ = 0;
}
inline double UnderlyingOneMinData::real_time_historical_volatility() const {
  // @@protoc_insertion_point(field_get:UnderlyingOneMinData.real_time_historical_volatility)
  return real_time_historical_volatility_;
}
inline void UnderlyingOneMinData::set_real_time_historical_volatility(double value) {
  
  real_time_historical_volatility_ = value;
  // @@protoc_insertion_point(field_set:UnderlyingOneMinData.real_time_historical_volatility)
}

// double option_implied_volatility = 16;
inline void UnderlyingOneMinData::clear_option_implied_volatility() {
  option_implied_volatility_ = 0;
}
inline double UnderlyingOneMinData::option_implied_volatility() const {
  // @@protoc_insertion_point(field_get:UnderlyingOneMinData.option_implied_volatility)
  return option_implied_volatility_;
}
inline void UnderlyingOneMinData::set_option_implied_volatility(double value) {
  
  option_implied_volatility_ = value;
  // @@protoc_insertion_point(field_set:UnderlyingOneMinData.option_implied_volatility)
}

// double call_open_interest = 17;
inline void UnderlyingOneMinData::clear_call_open_interest() {
  call_open_interest_ = 0;
}
inline double UnderlyingOneMinData::call_open_interest() const {
  // @@protoc_insertion_point(field_get:UnderlyingOneMinData.call_open_interest)
  return call_open_interest_;
}
inline void UnderlyingOneMinData::set_call_open_interest(double value) {
  
  call_open_interest_ = value;
  // @@protoc_insertion_point(field_set:UnderlyingOneMinData.call_open_interest)
}

// double put_open_interest = 18;
inline void UnderlyingOneMinData::clear_put_open_interest() {
  put_open_interest_ = 0;
}
inline double UnderlyingOneMinData::put_open_interest() const {
  // @@protoc_insertion_point(field_get:UnderlyingOneMinData.put_open_interest)
  return put_open_interest_;
}
inline void UnderlyingOneMinData::set_put_open_interest(double value) {
  
  put_open_interest_ = value;
  // @@protoc_insertion_point(field_set:UnderlyingOneMinData.put_open_interest)
}

// double futures_open_interest = 19;
inline void UnderlyingOneMinData::clear_futures_open_interest() {
  futures_open_interest_ = 0;
}
inline double UnderlyingOneMinData::futures_open_interest() const {
  // @@protoc_insertion_point(field_get:UnderlyingOneMinData.futures_open_interest)
  return futures_open_interest_;
}
inline void UnderlyingOneMinData::set_futures_open_interest(double value) {
  
  futures_open_interest_ = value;
  // @@protoc_insertion_point(field_set:UnderlyingOneMinData.futures_open_interest)
}

// -------------------------------------------------------------------

// UnderlyingAverages

// double low_13_week = 1;
inline void UnderlyingAverages::clear_low_13_week() {
  low_13_week_ = 0;
}
inline double UnderlyingAverages::low_13_week() const {
  // @@protoc_insertion_point(field_get:UnderlyingAverages.low_13_week)
  return low_13_week_;
}
inline void UnderlyingAverages::set_low_13_week(double value) {
  
  low_13_week_ = value;
  // @@protoc_insertion_point(field_set:UnderlyingAverages.low_13_week)
}

// double high_13_week = 2;
inline void UnderlyingAverages::clear_high_13_week() {
  high_13_week_ = 0;
}
inline double UnderlyingAverages::high_13_week() const {
  // @@protoc_insertion_point(field_get:UnderlyingAverages.high_13_week)
  return high_13_week_;
}
inline void UnderlyingAverages::set_high_13_week(double value) {
  
  high_13_week_ = value;
  // @@protoc_insertion_point(field_set:UnderlyingAverages.high_13_week)
}

// double low_26_week = 3;
inline void UnderlyingAverages::clear_low_26_week() {
  low_26_week_ = 0;
}
inline double UnderlyingAverages::low_26_week() const {
  // @@protoc_insertion_point(field_get:UnderlyingAverages.low_26_week)
  return low_26_week_;
}
inline void UnderlyingAverages::set_low_26_week(double value) {
  
  low_26_week_ = value;
  // @@protoc_insertion_point(field_set:UnderlyingAverages.low_26_week)
}

// double high_26_week = 4;
inline void UnderlyingAverages::clear_high_26_week() {
  high_26_week_ = 0;
}
inline double UnderlyingAverages::high_26_week() const {
  // @@protoc_insertion_point(field_get:UnderlyingAverages.high_26_week)
  return high_26_week_;
}
inline void UnderlyingAverages::set_high_26_week(double value) {
  
  high_26_week_ = value;
  // @@protoc_insertion_point(field_set:UnderlyingAverages.high_26_week)
}

// double low_52_week = 5;
inline void UnderlyingAverages::clear_low_52_week() {
  low_52_week_ = 0;
}
inline double UnderlyingAverages::low_52_week() const {
  // @@protoc_insertion_point(field_get:UnderlyingAverages.low_52_week)
  return low_52_week_;
}
inline void UnderlyingAverages::set_low_52_week(double value) {
  
  low_52_week_ = value;
  // @@protoc_insertion_point(field_set:UnderlyingAverages.low_52_week)
}

// double high_52_week = 6;
inline void UnderlyingAverages::clear_high_52_week() {
  high_52_week_ = 0;
}
inline double UnderlyingAverages::high_52_week() const {
  // @@protoc_insertion_point(field_get:UnderlyingAverages.high_52_week)
  return high_52_week_;
}
inline void UnderlyingAverages::set_high_52_week(double value) {
  
  high_52_week_ = value;
  // @@protoc_insertion_point(field_set:UnderlyingAverages.high_52_week)
}

// double average_volume_90_day = 7;
inline void UnderlyingAverages::clear_average_volume_90_day() {
  average_volume_90_day_ = 0;
}
inline double UnderlyingAverages::average_volume_90_day() const {
  // @@protoc_insertion_point(field_get:UnderlyingAverages.average_volume_90_day)
  return average_volume_90_day_;
}
inline void UnderlyingAverages::set_average_volume_90_day(double value) {
  
  average_volume_90_day_ = value;
  // @@protoc_insertion_point(field_set:UnderlyingAverages.average_volume_90_day)
}

// -------------------------------------------------------------------

// UnderlyingContract

// string symbol = 1;
inline void UnderlyingContract::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UnderlyingContract::symbol() const {
  // @@protoc_insertion_point(field_get:UnderlyingContract.symbol)
  return symbol_.GetNoArena();
}
inline void UnderlyingContract::set_symbol(const ::std::string& value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UnderlyingContract.symbol)
}
#if LANG_CXX11
inline void UnderlyingContract::set_symbol(::std::string&& value) {
  
  symbol_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UnderlyingContract.symbol)
}
#endif
inline void UnderlyingContract::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UnderlyingContract.symbol)
}
inline void UnderlyingContract::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UnderlyingContract.symbol)
}
inline ::std::string* UnderlyingContract::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:UnderlyingContract.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UnderlyingContract::release_symbol() {
  // @@protoc_insertion_point(field_release:UnderlyingContract.symbol)
  
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnderlyingContract::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:UnderlyingContract.symbol)
}

// repeated .UnderlyingOneMinData underlying_one_min = 2;
inline int UnderlyingContract::underlying_one_min_size() const {
  return underlying_one_min_.size();
}
inline void UnderlyingContract::clear_underlying_one_min() {
  underlying_one_min_.Clear();
}
inline ::UnderlyingOneMinData* UnderlyingContract::mutable_underlying_one_min(int index) {
  // @@protoc_insertion_point(field_mutable:UnderlyingContract.underlying_one_min)
  return underlying_one_min_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::UnderlyingOneMinData >*
UnderlyingContract::mutable_underlying_one_min() {
  // @@protoc_insertion_point(field_mutable_list:UnderlyingContract.underlying_one_min)
  return &underlying_one_min_;
}
inline const ::UnderlyingOneMinData& UnderlyingContract::underlying_one_min(int index) const {
  // @@protoc_insertion_point(field_get:UnderlyingContract.underlying_one_min)
  return underlying_one_min_.Get(index);
}
inline ::UnderlyingOneMinData* UnderlyingContract::add_underlying_one_min() {
  // @@protoc_insertion_point(field_add:UnderlyingContract.underlying_one_min)
  return underlying_one_min_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::UnderlyingOneMinData >&
UnderlyingContract::underlying_one_min() const {
  // @@protoc_insertion_point(field_list:UnderlyingContract.underlying_one_min)
  return underlying_one_min_;
}

// repeated .UnderlyingAverages underlying_averages = 3;
inline int UnderlyingContract::underlying_averages_size() const {
  return underlying_averages_.size();
}
inline void UnderlyingContract::clear_underlying_averages() {
  underlying_averages_.Clear();
}
inline ::UnderlyingAverages* UnderlyingContract::mutable_underlying_averages(int index) {
  // @@protoc_insertion_point(field_mutable:UnderlyingContract.underlying_averages)
  return underlying_averages_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::UnderlyingAverages >*
UnderlyingContract::mutable_underlying_averages() {
  // @@protoc_insertion_point(field_mutable_list:UnderlyingContract.underlying_averages)
  return &underlying_averages_;
}
inline const ::UnderlyingAverages& UnderlyingContract::underlying_averages(int index) const {
  // @@protoc_insertion_point(field_get:UnderlyingContract.underlying_averages)
  return underlying_averages_.Get(index);
}
inline ::UnderlyingAverages* UnderlyingContract::add_underlying_averages() {
  // @@protoc_insertion_point(field_add:UnderlyingContract.underlying_averages)
  return underlying_averages_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::UnderlyingAverages >&
UnderlyingContract::underlying_averages() const {
  // @@protoc_insertion_point(field_list:UnderlyingContract.underlying_averages)
  return underlying_averages_;
}

// repeated .UnderlyingPriceTick underlying_price_tick = 4;
inline int UnderlyingContract::underlying_price_tick_size() const {
  return underlying_price_tick_.size();
}
inline void UnderlyingContract::clear_underlying_price_tick() {
  underlying_price_tick_.Clear();
}
inline ::UnderlyingPriceTick* UnderlyingContract::mutable_underlying_price_tick(int index) {
  // @@protoc_insertion_point(field_mutable:UnderlyingContract.underlying_price_tick)
  return underlying_price_tick_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::UnderlyingPriceTick >*
UnderlyingContract::mutable_underlying_price_tick() {
  // @@protoc_insertion_point(field_mutable_list:UnderlyingContract.underlying_price_tick)
  return &underlying_price_tick_;
}
inline const ::UnderlyingPriceTick& UnderlyingContract::underlying_price_tick(int index) const {
  // @@protoc_insertion_point(field_get:UnderlyingContract.underlying_price_tick)
  return underlying_price_tick_.Get(index);
}
inline ::UnderlyingPriceTick* UnderlyingContract::add_underlying_price_tick() {
  // @@protoc_insertion_point(field_add:UnderlyingContract.underlying_price_tick)
  return underlying_price_tick_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::UnderlyingPriceTick >&
UnderlyingContract::underlying_price_tick() const {
  // @@protoc_insertion_point(field_list:UnderlyingContract.underlying_price_tick)
  return underlying_price_tick_;
}

// -------------------------------------------------------------------

// NewsEvent

// int64 time = 1;
inline void NewsEvent::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 NewsEvent::time() const {
  // @@protoc_insertion_point(field_get:NewsEvent.time)
  return time_;
}
inline void NewsEvent::set_time(::google::protobuf::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:NewsEvent.time)
}

// string article_id = 2;
inline void NewsEvent::clear_article_id() {
  article_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NewsEvent::article_id() const {
  // @@protoc_insertion_point(field_get:NewsEvent.article_id)
  return article_id_.GetNoArena();
}
inline void NewsEvent::set_article_id(const ::std::string& value) {
  
  article_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NewsEvent.article_id)
}
#if LANG_CXX11
inline void NewsEvent::set_article_id(::std::string&& value) {
  
  article_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NewsEvent.article_id)
}
#endif
inline void NewsEvent::set_article_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  article_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NewsEvent.article_id)
}
inline void NewsEvent::set_article_id(const char* value, size_t size) {
  
  article_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NewsEvent.article_id)
}
inline ::std::string* NewsEvent::mutable_article_id() {
  
  // @@protoc_insertion_point(field_mutable:NewsEvent.article_id)
  return article_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewsEvent::release_article_id() {
  // @@protoc_insertion_point(field_release:NewsEvent.article_id)
  
  return article_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewsEvent::set_allocated_article_id(::std::string* article_id) {
  if (article_id != NULL) {
    
  } else {
    
  }
  article_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), article_id);
  // @@protoc_insertion_point(field_set_allocated:NewsEvent.article_id)
}

// string headline = 3;
inline void NewsEvent::clear_headline() {
  headline_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NewsEvent::headline() const {
  // @@protoc_insertion_point(field_get:NewsEvent.headline)
  return headline_.GetNoArena();
}
inline void NewsEvent::set_headline(const ::std::string& value) {
  
  headline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NewsEvent.headline)
}
#if LANG_CXX11
inline void NewsEvent::set_headline(::std::string&& value) {
  
  headline_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NewsEvent.headline)
}
#endif
inline void NewsEvent::set_headline(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  headline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NewsEvent.headline)
}
inline void NewsEvent::set_headline(const char* value, size_t size) {
  
  headline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NewsEvent.headline)
}
inline ::std::string* NewsEvent::mutable_headline() {
  
  // @@protoc_insertion_point(field_mutable:NewsEvent.headline)
  return headline_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewsEvent::release_headline() {
  // @@protoc_insertion_point(field_release:NewsEvent.headline)
  
  return headline_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewsEvent::set_allocated_headline(::std::string* headline) {
  if (headline != NULL) {
    
  } else {
    
  }
  headline_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), headline);
  // @@protoc_insertion_point(field_set_allocated:NewsEvent.headline)
}

// double sentiment_score = 4;
inline void NewsEvent::clear_sentiment_score() {
  sentiment_score_ = 0;
}
inline double NewsEvent::sentiment_score() const {
  // @@protoc_insertion_point(field_get:NewsEvent.sentiment_score)
  return sentiment_score_;
}
inline void NewsEvent::set_sentiment_score(double value) {
  
  sentiment_score_ = value;
  // @@protoc_insertion_point(field_set:NewsEvent.sentiment_score)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_messages_2eproto
