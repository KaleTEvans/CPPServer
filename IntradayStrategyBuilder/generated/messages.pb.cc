// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#include "messages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_messages_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BasicMessage;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Confirmation;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FiveSecData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ISBAction;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_NewsEvent;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_OneMinData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TickData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TimeAndSalesData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UnderlyingAverages;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UnderlyingOneMinData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UnderlyingPriceTick;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_UnderlyingContract;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_OptionData;
}  // namespace protobuf_messages_2eproto
class MessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Message>
      _instance;
  const ::BasicMessage* basic_message_;
  const ::Confirmation* confirmation_;
  const ::ISBAction* isb_action_;
  const ::OptionData* option_data_;
  const ::UnderlyingContract* underlying_contract_;
  const ::NewsEvent* news_;
} _Message_default_instance_;
class BasicMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BasicMessage>
      _instance;
} _BasicMessage_default_instance_;
class ConfirmationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Confirmation>
      _instance;
} _Confirmation_default_instance_;
class ISBActionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ISBAction>
      _instance;
} _ISBAction_default_instance_;
class TimeAndSalesDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TimeAndSalesData>
      _instance;
} _TimeAndSalesData_default_instance_;
class TickDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TickData>
      _instance;
} _TickData_default_instance_;
class FiveSecDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FiveSecData>
      _instance;
} _FiveSecData_default_instance_;
class OneMinDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OneMinData>
      _instance;
} _OneMinData_default_instance_;
class OptionDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OptionData>
      _instance;
} _OptionData_default_instance_;
class OptionDataBatchDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OptionDataBatch>
      _instance;
} _OptionDataBatch_default_instance_;
class UnderlyingPriceTickDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UnderlyingPriceTick>
      _instance;
} _UnderlyingPriceTick_default_instance_;
class UnderlyingOneMinDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UnderlyingOneMinData>
      _instance;
} _UnderlyingOneMinData_default_instance_;
class UnderlyingAveragesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UnderlyingAverages>
      _instance;
} _UnderlyingAverages_default_instance_;
class UnderlyingContractDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UnderlyingContract>
      _instance;
} _UnderlyingContract_default_instance_;
class NewsEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NewsEvent>
      _instance;
} _NewsEvent_default_instance_;
namespace protobuf_messages_2eproto {
static void InitDefaultsMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Message_default_instance_;
    new (ptr) ::Message();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Message::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<6> scc_info_Message =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsMessage}, {
      &protobuf_messages_2eproto::scc_info_BasicMessage.base,
      &protobuf_messages_2eproto::scc_info_Confirmation.base,
      &protobuf_messages_2eproto::scc_info_ISBAction.base,
      &protobuf_messages_2eproto::scc_info_OptionData.base,
      &protobuf_messages_2eproto::scc_info_UnderlyingContract.base,
      &protobuf_messages_2eproto::scc_info_NewsEvent.base,}};

static void InitDefaultsBasicMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BasicMessage_default_instance_;
    new (ptr) ::BasicMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BasicMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BasicMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBasicMessage}, {}};

static void InitDefaultsConfirmation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Confirmation_default_instance_;
    new (ptr) ::Confirmation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Confirmation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Confirmation =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfirmation}, {}};

static void InitDefaultsISBAction() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ISBAction_default_instance_;
    new (ptr) ::ISBAction();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ISBAction::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ISBAction =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsISBAction}, {}};

static void InitDefaultsTimeAndSalesData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TimeAndSalesData_default_instance_;
    new (ptr) ::TimeAndSalesData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TimeAndSalesData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TimeAndSalesData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTimeAndSalesData}, {}};

static void InitDefaultsTickData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TickData_default_instance_;
    new (ptr) ::TickData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TickData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TickData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTickData}, {}};

static void InitDefaultsFiveSecData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_FiveSecData_default_instance_;
    new (ptr) ::FiveSecData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::FiveSecData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FiveSecData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFiveSecData}, {}};

static void InitDefaultsOneMinData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_OneMinData_default_instance_;
    new (ptr) ::OneMinData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OneMinData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OneMinData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOneMinData}, {}};

static void InitDefaultsOptionData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_OptionData_default_instance_;
    new (ptr) ::OptionData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OptionData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_OptionData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsOptionData}, {
      &protobuf_messages_2eproto::scc_info_TickData.base,
      &protobuf_messages_2eproto::scc_info_FiveSecData.base,
      &protobuf_messages_2eproto::scc_info_OneMinData.base,
      &protobuf_messages_2eproto::scc_info_TimeAndSalesData.base,}};

static void InitDefaultsOptionDataBatch() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_OptionDataBatch_default_instance_;
    new (ptr) ::OptionDataBatch();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OptionDataBatch::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_OptionDataBatch =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsOptionDataBatch}, {
      &protobuf_messages_2eproto::scc_info_OptionData.base,}};

static void InitDefaultsUnderlyingPriceTick() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UnderlyingPriceTick_default_instance_;
    new (ptr) ::UnderlyingPriceTick();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UnderlyingPriceTick::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UnderlyingPriceTick =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUnderlyingPriceTick}, {}};

static void InitDefaultsUnderlyingOneMinData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UnderlyingOneMinData_default_instance_;
    new (ptr) ::UnderlyingOneMinData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UnderlyingOneMinData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UnderlyingOneMinData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUnderlyingOneMinData}, {}};

static void InitDefaultsUnderlyingAverages() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UnderlyingAverages_default_instance_;
    new (ptr) ::UnderlyingAverages();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UnderlyingAverages::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UnderlyingAverages =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUnderlyingAverages}, {}};

static void InitDefaultsUnderlyingContract() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UnderlyingContract_default_instance_;
    new (ptr) ::UnderlyingContract();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UnderlyingContract::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_UnderlyingContract =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsUnderlyingContract}, {
      &protobuf_messages_2eproto::scc_info_UnderlyingOneMinData.base,
      &protobuf_messages_2eproto::scc_info_UnderlyingAverages.base,
      &protobuf_messages_2eproto::scc_info_UnderlyingPriceTick.base,}};

static void InitDefaultsNewsEvent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_NewsEvent_default_instance_;
    new (ptr) ::NewsEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NewsEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NewsEvent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNewsEvent}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Message.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BasicMessage.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Confirmation.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ISBAction.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TimeAndSalesData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TickData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FiveSecData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OneMinData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OptionData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OptionDataBatch.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UnderlyingPriceTick.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UnderlyingOneMinData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UnderlyingAverages.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UnderlyingContract.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NewsEvent.base);
}

::google::protobuf::Metadata file_level_metadata[15];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message, type_),
  offsetof(::MessageDefaultTypeInternal, basic_message_),
  offsetof(::MessageDefaultTypeInternal, confirmation_),
  offsetof(::MessageDefaultTypeInternal, isb_action_),
  offsetof(::MessageDefaultTypeInternal, option_data_),
  offsetof(::MessageDefaultTypeInternal, underlying_contract_),
  offsetof(::MessageDefaultTypeInternal, news_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Message, payload_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BasicMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BasicMessage, message_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Confirmation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Confirmation, action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Confirmation, status_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ISBAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ISBAction, component_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ISBAction, action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ISBAction, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TimeAndSalesData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TimeAndSalesData, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TimeAndSalesData, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TimeAndSalesData, quantity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TimeAndSalesData, total_volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TimeAndSalesData, vwap_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TimeAndSalesData, current_ask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TimeAndSalesData, current_bid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TimeAndSalesData, current_rtm_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TickData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TickData, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TickData, bid_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TickData, bid_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TickData, ask_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TickData, ask_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TickData, last_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TickData, mark_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TickData, volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TickData, implied_vol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TickData, delta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TickData, gamma_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TickData, vega_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TickData, theta_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::FiveSecData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::FiveSecData, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::FiveSecData, open_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::FiveSecData, close_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::FiveSecData, high_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::FiveSecData, low_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::FiveSecData, volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::FiveSecData, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::FiveSecData, rtm_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OneMinData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OneMinData, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OneMinData, open_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OneMinData, close_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OneMinData, high_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OneMinData, low_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OneMinData, candle_vol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OneMinData, trade_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OneMinData, implied_vol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OneMinData, delta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OneMinData, gamma_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OneMinData, vega_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OneMinData, theta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OneMinData, und_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OneMinData, total_vol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OneMinData, rtm_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OptionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OptionData, symbol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OptionData, strike_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OptionData, right_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OptionData, exp_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OptionData, ticks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OptionData, five_sec_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OptionData, one_min_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OptionData, tas_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OptionDataBatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OptionDataBatch, optiondatapoints_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UnderlyingPriceTick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UnderlyingPriceTick, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UnderlyingPriceTick, price_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UnderlyingOneMinData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UnderlyingOneMinData, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UnderlyingOneMinData, open_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UnderlyingOneMinData, high_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UnderlyingOneMinData, low_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UnderlyingOneMinData, close_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UnderlyingOneMinData, volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UnderlyingOneMinData, daily_high_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UnderlyingOneMinData, daily_low_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UnderlyingOneMinData, daily_volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UnderlyingOneMinData, total_call_volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UnderlyingOneMinData, total_put_volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UnderlyingOneMinData, index_future_premium_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UnderlyingOneMinData, total_trade_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UnderlyingOneMinData, one_minute_trade_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UnderlyingOneMinData, real_time_historical_volatility_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UnderlyingOneMinData, option_implied_volatility_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UnderlyingOneMinData, call_open_interest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UnderlyingOneMinData, put_open_interest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UnderlyingOneMinData, futures_open_interest_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UnderlyingAverages, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UnderlyingAverages, low_13_week_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UnderlyingAverages, high_13_week_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UnderlyingAverages, low_26_week_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UnderlyingAverages, high_26_week_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UnderlyingAverages, low_52_week_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UnderlyingAverages, high_52_week_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UnderlyingAverages, average_volume_90_day_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UnderlyingContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UnderlyingContract, symbol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UnderlyingContract, underlying_one_min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UnderlyingContract, underlying_averages_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UnderlyingContract, underlying_price_tick_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NewsEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NewsEvent, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NewsEvent, article_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NewsEvent, headline_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NewsEvent, sentiment_score_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Message)},
  { 13, -1, sizeof(::BasicMessage)},
  { 19, -1, sizeof(::Confirmation)},
  { 26, -1, sizeof(::ISBAction)},
  { 34, -1, sizeof(::TimeAndSalesData)},
  { 47, -1, sizeof(::TickData)},
  { 65, -1, sizeof(::FiveSecData)},
  { 78, -1, sizeof(::OneMinData)},
  { 98, -1, sizeof(::OptionData)},
  { 111, -1, sizeof(::OptionDataBatch)},
  { 117, -1, sizeof(::UnderlyingPriceTick)},
  { 124, -1, sizeof(::UnderlyingOneMinData)},
  { 148, -1, sizeof(::UnderlyingAverages)},
  { 160, -1, sizeof(::UnderlyingContract)},
  { 169, -1, sizeof(::NewsEvent)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Message_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_BasicMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Confirmation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ISBAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TimeAndSalesData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TickData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_FiveSecData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_OneMinData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_OptionData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_OptionDataBatch_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_UnderlyingPriceTick_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_UnderlyingOneMinData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_UnderlyingAverages_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_UnderlyingContract_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_NewsEvent_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "messages.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 15);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016messages.proto\"\207\002\n\007Message\022\014\n\004type\030\001 \001"
      "(\t\022&\n\rbasic_message\030\002 \001(\0132\r.BasicMessage"
      "H\000\022%\n\014confirmation\030\003 \001(\0132\r.ConfirmationH"
      "\000\022 \n\nisb_action\030\004 \001(\0132\n.ISBActionH\000\022\"\n\013o"
      "ption_data\030\005 \001(\0132\013.OptionDataH\000\0222\n\023under"
      "lying_contract\030\006 \001(\0132\023.UnderlyingContrac"
      "tH\000\022\032\n\004news\030\007 \001(\0132\n.NewsEventH\000B\t\n\007paylo"
      "ad\"\037\n\014BasicMessage\022\017\n\007message\030\001 \001(\t\".\n\014C"
      "onfirmation\022\016\n\006action\030\001 \001(\t\022\016\n\006status\030\002 "
      "\001(\t\"<\n\tISBAction\022\021\n\tcomponent\030\001 \001(\t\022\016\n\006a"
      "ction\030\002 \001(\t\022\014\n\004data\030\003 \001(\t\"\251\001\n\020TimeAndSal"
      "esData\022\021\n\ttimestamp\030\001 \001(\003\022\r\n\005price\030\002 \001(\001"
      "\022\020\n\010quantity\030\003 \001(\001\022\024\n\014total_volume\030\004 \001(\001"
      "\022\014\n\004vwap\030\005 \001(\001\022\023\n\013current_ask\030\006 \001(\001\022\023\n\013c"
      "urrent_bid\030\007 \001(\001\022\023\n\013current_rtm\030\010 \001(\t\"\357\001"
      "\n\010TickData\022\021\n\ttimestamp\030\001 \001(\003\022\021\n\tbid_pri"
      "ce\030\002 \001(\001\022\020\n\010bid_size\030\003 \001(\001\022\021\n\task_price\030"
      "\004 \001(\001\022\020\n\010ask_size\030\005 \001(\001\022\022\n\nlast_price\030\006 "
      "\001(\001\022\022\n\nmark_price\030\007 \001(\001\022\016\n\006volume\030\010 \001(\001\022"
      "\023\n\013implied_vol\030\t \001(\001\022\r\n\005delta\030\n \001(\001\022\r\n\005g"
      "amma\030\013 \001(\001\022\014\n\004vega\030\014 \001(\001\022\r\n\005theta\030\r \001(\001\""
      "\177\n\013FiveSecData\022\014\n\004time\030\001 \001(\003\022\014\n\004open\030\002 \001"
      "(\001\022\r\n\005close\030\003 \001(\001\022\014\n\004high\030\004 \001(\001\022\013\n\003low\030\005"
      " \001(\001\022\016\n\006volume\030\006 \001(\t\022\r\n\005count\030\007 \001(\005\022\013\n\003r"
      "tm\030\010 \001(\t\"\376\001\n\nOneMinData\022\014\n\004time\030\001 \001(\003\022\014\n"
      "\004open\030\002 \001(\001\022\r\n\005close\030\003 \001(\001\022\014\n\004high\030\004 \001(\001"
      "\022\013\n\003low\030\005 \001(\001\022\022\n\ncandle_vol\030\006 \001(\001\022\023\n\013tra"
      "de_count\030\007 \001(\001\022\023\n\013implied_vol\030\010 \001(\001\022\r\n\005d"
      "elta\030\t \001(\001\022\r\n\005gamma\030\n \001(\001\022\014\n\004vega\030\013 \001(\001\022"
      "\r\n\005theta\030\014 \001(\001\022\021\n\tund_price\030\r \001(\001\022\021\n\ttot"
      "al_vol\030\016 \001(\001\022\013\n\003rtm\030\017 \001(\t\"\317\001\n\nOptionData"
      "\022\016\n\006symbol\030\001 \001(\t\022\016\n\006strike\030\002 \001(\001\022\r\n\005righ"
      "t\030\003 \001(\t\022\020\n\010exp_date\030\004 \001(\t\022\030\n\005ticks\030\005 \003(\013"
      "2\t.TickData\022#\n\rfive_sec_data\030\006 \003(\0132\014.Fiv"
      "eSecData\022!\n\014one_min_data\030\007 \003(\0132\013.OneMinD"
      "ata\022\036\n\003tas\030\010 \003(\0132\021.TimeAndSalesData\"8\n\017O"
      "ptionDataBatch\022%\n\020optionDataPoints\030\001 \003(\013"
      "2\013.OptionData\"2\n\023UnderlyingPriceTick\022\014\n\004"
      "time\030\001 \001(\003\022\r\n\005price\030\002 \001(\001\"\330\003\n\024Underlying"
      "OneMinData\022\014\n\004time\030\001 \001(\003\022\014\n\004open\030\002 \001(\001\022\014"
      "\n\004high\030\003 \001(\001\022\013\n\003low\030\004 \001(\001\022\r\n\005close\030\005 \001(\001"
      "\022\016\n\006volume\030\006 \001(\001\022\022\n\ndaily_high\030\007 \001(\001\022\021\n\t"
      "daily_low\030\010 \001(\001\022\024\n\014daily_volume\030\t \001(\001\022\031\n"
      "\021total_call_volume\030\n \001(\001\022\030\n\020total_put_vo"
      "lume\030\013 \001(\001\022\034\n\024index_future_premium\030\014 \001(\001"
      "\022\031\n\021total_trade_count\030\r \001(\001\022\035\n\025one_minut"
      "e_trade_rate\030\016 \001(\001\022\'\n\037real_time_historic"
      "al_volatility\030\017 \001(\001\022!\n\031option_implied_vo"
      "latility\030\020 \001(\001\022\032\n\022call_open_interest\030\021 \001"
      "(\001\022\031\n\021put_open_interest\030\022 \001(\001\022\035\n\025futures"
      "_open_interest\030\023 \001(\001\"\264\001\n\022UnderlyingAvera"
      "ges\022\023\n\013low_13_week\030\001 \001(\001\022\024\n\014high_13_week"
      "\030\002 \001(\001\022\023\n\013low_26_week\030\003 \001(\001\022\024\n\014high_26_w"
      "eek\030\004 \001(\001\022\023\n\013low_52_week\030\005 \001(\001\022\024\n\014high_5"
      "2_week\030\006 \001(\001\022\035\n\025average_volume_90_day\030\007 "
      "\001(\001\"\276\001\n\022UnderlyingContract\022\016\n\006symbol\030\001 \001"
      "(\t\0221\n\022underlying_one_min\030\002 \003(\0132\025.Underly"
      "ingOneMinData\0220\n\023underlying_averages\030\003 \003"
      "(\0132\023.UnderlyingAverages\0223\n\025underlying_pr"
      "ice_tick\030\004 \003(\0132\024.UnderlyingPriceTick\"X\n\t"
      "NewsEvent\022\014\n\004time\030\001 \001(\003\022\022\n\narticle_id\030\002 "
      "\001(\t\022\020\n\010headline\030\003 \001(\t\022\027\n\017sentiment_score"
      "\030\004 \001(\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2494);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "messages.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_messages_2eproto

// ===================================================================

void Message::InitAsDefaultInstance() {
  ::_Message_default_instance_.basic_message_ = const_cast< ::BasicMessage*>(
      ::BasicMessage::internal_default_instance());
  ::_Message_default_instance_.confirmation_ = const_cast< ::Confirmation*>(
      ::Confirmation::internal_default_instance());
  ::_Message_default_instance_.isb_action_ = const_cast< ::ISBAction*>(
      ::ISBAction::internal_default_instance());
  ::_Message_default_instance_.option_data_ = const_cast< ::OptionData*>(
      ::OptionData::internal_default_instance());
  ::_Message_default_instance_.underlying_contract_ = const_cast< ::UnderlyingContract*>(
      ::UnderlyingContract::internal_default_instance());
  ::_Message_default_instance_.news_ = const_cast< ::NewsEvent*>(
      ::NewsEvent::internal_default_instance());
}
void Message::set_allocated_basic_message(::BasicMessage* basic_message) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (basic_message) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      basic_message = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, basic_message, submessage_arena);
    }
    set_has_basic_message();
    payload_.basic_message_ = basic_message;
  }
  // @@protoc_insertion_point(field_set_allocated:Message.basic_message)
}
void Message::set_allocated_confirmation(::Confirmation* confirmation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (confirmation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      confirmation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, confirmation, submessage_arena);
    }
    set_has_confirmation();
    payload_.confirmation_ = confirmation;
  }
  // @@protoc_insertion_point(field_set_allocated:Message.confirmation)
}
void Message::set_allocated_isb_action(::ISBAction* isb_action) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (isb_action) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      isb_action = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, isb_action, submessage_arena);
    }
    set_has_isb_action();
    payload_.isb_action_ = isb_action;
  }
  // @@protoc_insertion_point(field_set_allocated:Message.isb_action)
}
void Message::set_allocated_option_data(::OptionData* option_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (option_data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      option_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, option_data, submessage_arena);
    }
    set_has_option_data();
    payload_.option_data_ = option_data;
  }
  // @@protoc_insertion_point(field_set_allocated:Message.option_data)
}
void Message::set_allocated_underlying_contract(::UnderlyingContract* underlying_contract) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (underlying_contract) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      underlying_contract = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, underlying_contract, submessage_arena);
    }
    set_has_underlying_contract();
    payload_.underlying_contract_ = underlying_contract;
  }
  // @@protoc_insertion_point(field_set_allocated:Message.underlying_contract)
}
void Message::set_allocated_news(::NewsEvent* news) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (news) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      news = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, news, submessage_arena);
    }
    set_has_news();
    payload_.news_ = news;
  }
  // @@protoc_insertion_point(field_set_allocated:Message.news)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Message::kTypeFieldNumber;
const int Message::kBasicMessageFieldNumber;
const int Message::kConfirmationFieldNumber;
const int Message::kIsbActionFieldNumber;
const int Message::kOptionDataFieldNumber;
const int Message::kUnderlyingContractFieldNumber;
const int Message::kNewsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Message::Message()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_Message.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Message)
}
Message::Message(const Message& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.type().size() > 0) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  clear_has_payload();
  switch (from.payload_case()) {
    case kBasicMessage: {
      mutable_basic_message()->::BasicMessage::MergeFrom(from.basic_message());
      break;
    }
    case kConfirmation: {
      mutable_confirmation()->::Confirmation::MergeFrom(from.confirmation());
      break;
    }
    case kIsbAction: {
      mutable_isb_action()->::ISBAction::MergeFrom(from.isb_action());
      break;
    }
    case kOptionData: {
      mutable_option_data()->::OptionData::MergeFrom(from.option_data());
      break;
    }
    case kUnderlyingContract: {
      mutable_underlying_contract()->::UnderlyingContract::MergeFrom(from.underlying_contract());
      break;
    }
    case kNews: {
      mutable_news()->::NewsEvent::MergeFrom(from.news());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Message)
}

void Message::SharedCtor() {
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_payload();
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:Message)
  SharedDtor();
}

void Message::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_payload()) {
    clear_payload();
  }
}

void Message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  ::protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Message& Message::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_Message.base);
  return *internal_default_instance();
}


void Message::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:Message)
  switch (payload_case()) {
    case kBasicMessage: {
      delete payload_.basic_message_;
      break;
    }
    case kConfirmation: {
      delete payload_.confirmation_;
      break;
    }
    case kIsbAction: {
      delete payload_.isb_action_;
      break;
    }
    case kOptionData: {
      delete payload_.option_data_;
      break;
    }
    case kUnderlyingContract: {
      delete payload_.underlying_contract_;
      break;
    }
    case kNews: {
      delete payload_.news_;
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_payload();
  _internal_metadata_.Clear();
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Message)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Message.type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .BasicMessage basic_message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_basic_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Confirmation confirmation = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_confirmation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ISBAction isb_action = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_isb_action()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OptionData option_data = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_option_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .UnderlyingContract underlying_contract = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_underlying_contract()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NewsEvent news = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_news()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Message)
  return false;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Message.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // .BasicMessage basic_message = 2;
  if (has_basic_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_basic_message(), output);
  }

  // .Confirmation confirmation = 3;
  if (has_confirmation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_confirmation(), output);
  }

  // .ISBAction isb_action = 4;
  if (has_isb_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_isb_action(), output);
  }

  // .OptionData option_data = 5;
  if (has_option_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_option_data(), output);
  }

  // .UnderlyingContract underlying_contract = 6;
  if (has_underlying_contract()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_underlying_contract(), output);
  }

  // .NewsEvent news = 7;
  if (has_news()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_news(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Message)
}

::google::protobuf::uint8* Message::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Message.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // .BasicMessage basic_message = 2;
  if (has_basic_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_basic_message(), deterministic, target);
  }

  // .Confirmation confirmation = 3;
  if (has_confirmation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_confirmation(), deterministic, target);
  }

  // .ISBAction isb_action = 4;
  if (has_isb_action()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_isb_action(), deterministic, target);
  }

  // .OptionData option_data = 5;
  if (has_option_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_option_data(), deterministic, target);
  }

  // .UnderlyingContract underlying_contract = 6;
  if (has_underlying_contract()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_underlying_contract(), deterministic, target);
  }

  // .NewsEvent news = 7;
  if (has_news()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_news(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Message)
  return target;
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Message)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  switch (payload_case()) {
    // .BasicMessage basic_message = 2;
    case kBasicMessage: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.basic_message_);
      break;
    }
    // .Confirmation confirmation = 3;
    case kConfirmation: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.confirmation_);
      break;
    }
    // .ISBAction isb_action = 4;
    case kIsbAction: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.isb_action_);
      break;
    }
    // .OptionData option_data = 5;
    case kOptionData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.option_data_);
      break;
    }
    // .UnderlyingContract underlying_contract = 6;
    case kUnderlyingContract: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.underlying_contract_);
      break;
    }
    // .NewsEvent news = 7;
    case kNews: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.news_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Message)
  GOOGLE_DCHECK_NE(&from, this);
  const Message* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Message>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Message)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Message)
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  switch (from.payload_case()) {
    case kBasicMessage: {
      mutable_basic_message()->::BasicMessage::MergeFrom(from.basic_message());
      break;
    }
    case kConfirmation: {
      mutable_confirmation()->::Confirmation::MergeFrom(from.confirmation());
      break;
    }
    case kIsbAction: {
      mutable_isb_action()->::ISBAction::MergeFrom(from.isb_action());
      break;
    }
    case kOptionData: {
      mutable_option_data()->::OptionData::MergeFrom(from.option_data());
      break;
    }
    case kUnderlyingContract: {
      mutable_underlying_contract()->::UnderlyingContract::MergeFrom(from.underlying_contract());
      break;
    }
    case kNews: {
      mutable_news()->::NewsEvent::MergeFrom(from.news());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::Swap(Message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Message::InternalSwap(Message* other) {
  using std::swap;
  type_.Swap(&other->type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(payload_, other->payload_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BasicMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BasicMessage::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BasicMessage::BasicMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_BasicMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:BasicMessage)
}
BasicMessage::BasicMessage(const BasicMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  // @@protoc_insertion_point(copy_constructor:BasicMessage)
}

void BasicMessage::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

BasicMessage::~BasicMessage() {
  // @@protoc_insertion_point(destructor:BasicMessage)
  SharedDtor();
}

void BasicMessage::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BasicMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BasicMessage::descriptor() {
  ::protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BasicMessage& BasicMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_BasicMessage.base);
  return *internal_default_instance();
}


void BasicMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:BasicMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool BasicMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BasicMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string message = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BasicMessage.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BasicMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BasicMessage)
  return false;
#undef DO_
}

void BasicMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BasicMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BasicMessage.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:BasicMessage)
}

::google::protobuf::uint8* BasicMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:BasicMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BasicMessage.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BasicMessage)
  return target;
}

size_t BasicMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BasicMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string message = 1;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BasicMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BasicMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const BasicMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BasicMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BasicMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BasicMessage)
    MergeFrom(*source);
  }
}

void BasicMessage::MergeFrom(const BasicMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BasicMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void BasicMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BasicMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BasicMessage::CopyFrom(const BasicMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BasicMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasicMessage::IsInitialized() const {
  return true;
}

void BasicMessage::Swap(BasicMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BasicMessage::InternalSwap(BasicMessage* other) {
  using std::swap;
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BasicMessage::GetMetadata() const {
  protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Confirmation::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Confirmation::kActionFieldNumber;
const int Confirmation::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Confirmation::Confirmation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_Confirmation.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Confirmation)
}
Confirmation::Confirmation(const Confirmation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  action_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.action().size() > 0) {
    action_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.status().size() > 0) {
    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  // @@protoc_insertion_point(copy_constructor:Confirmation)
}

void Confirmation::SharedCtor() {
  action_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Confirmation::~Confirmation() {
  // @@protoc_insertion_point(destructor:Confirmation)
  SharedDtor();
}

void Confirmation::SharedDtor() {
  action_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Confirmation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Confirmation::descriptor() {
  ::protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Confirmation& Confirmation::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_Confirmation.base);
  return *internal_default_instance();
}


void Confirmation::Clear() {
// @@protoc_insertion_point(message_clear_start:Confirmation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  action_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool Confirmation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Confirmation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string action = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_action()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->action().data(), static_cast<int>(this->action().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Confirmation.action"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->status().data(), static_cast<int>(this->status().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Confirmation.status"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Confirmation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Confirmation)
  return false;
#undef DO_
}

void Confirmation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Confirmation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string action = 1;
  if (this->action().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->action().data(), static_cast<int>(this->action().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Confirmation.action");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->action(), output);
  }

  // string status = 2;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), static_cast<int>(this->status().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Confirmation.status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->status(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Confirmation)
}

::google::protobuf::uint8* Confirmation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Confirmation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string action = 1;
  if (this->action().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->action().data(), static_cast<int>(this->action().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Confirmation.action");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->action(), target);
  }

  // string status = 2;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), static_cast<int>(this->status().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Confirmation.status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->status(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Confirmation)
  return target;
}

size_t Confirmation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Confirmation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string action = 1;
  if (this->action().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->action());
  }

  // string status = 2;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Confirmation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Confirmation)
  GOOGLE_DCHECK_NE(&from, this);
  const Confirmation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Confirmation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Confirmation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Confirmation)
    MergeFrom(*source);
  }
}

void Confirmation::MergeFrom(const Confirmation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Confirmation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.action().size() > 0) {

    action_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
}

void Confirmation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Confirmation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Confirmation::CopyFrom(const Confirmation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Confirmation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Confirmation::IsInitialized() const {
  return true;
}

void Confirmation::Swap(Confirmation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Confirmation::InternalSwap(Confirmation* other) {
  using std::swap;
  action_.Swap(&other->action_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  status_.Swap(&other->status_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Confirmation::GetMetadata() const {
  protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ISBAction::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ISBAction::kComponentFieldNumber;
const int ISBAction::kActionFieldNumber;
const int ISBAction::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ISBAction::ISBAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_ISBAction.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ISBAction)
}
ISBAction::ISBAction(const ISBAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  component_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.component().size() > 0) {
    component_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.component_);
  }
  action_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.action().size() > 0) {
    action_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:ISBAction)
}

void ISBAction::SharedCtor() {
  component_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  action_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ISBAction::~ISBAction() {
  // @@protoc_insertion_point(destructor:ISBAction)
  SharedDtor();
}

void ISBAction::SharedDtor() {
  component_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  action_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ISBAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ISBAction::descriptor() {
  ::protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ISBAction& ISBAction::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_ISBAction.base);
  return *internal_default_instance();
}


void ISBAction::Clear() {
// @@protoc_insertion_point(message_clear_start:ISBAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  component_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  action_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ISBAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ISBAction)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string component = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_component()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->component().data(), static_cast<int>(this->component().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ISBAction.component"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string action = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_action()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->action().data(), static_cast<int>(this->action().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ISBAction.action"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->data().data(), static_cast<int>(this->data().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ISBAction.data"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ISBAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ISBAction)
  return false;
#undef DO_
}

void ISBAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ISBAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string component = 1;
  if (this->component().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->component().data(), static_cast<int>(this->component().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ISBAction.component");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->component(), output);
  }

  // string action = 2;
  if (this->action().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->action().data(), static_cast<int>(this->action().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ISBAction.action");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->action(), output);
  }

  // string data = 3;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ISBAction.data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ISBAction)
}

::google::protobuf::uint8* ISBAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ISBAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string component = 1;
  if (this->component().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->component().data(), static_cast<int>(this->component().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ISBAction.component");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->component(), target);
  }

  // string action = 2;
  if (this->action().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->action().data(), static_cast<int>(this->action().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ISBAction.action");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->action(), target);
  }

  // string data = 3;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ISBAction.data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ISBAction)
  return target;
}

size_t ISBAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ISBAction)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string component = 1;
  if (this->component().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->component());
  }

  // string action = 2;
  if (this->action().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->action());
  }

  // string data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ISBAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ISBAction)
  GOOGLE_DCHECK_NE(&from, this);
  const ISBAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ISBAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ISBAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ISBAction)
    MergeFrom(*source);
  }
}

void ISBAction::MergeFrom(const ISBAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ISBAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.component().size() > 0) {

    component_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.component_);
  }
  if (from.action().size() > 0) {

    action_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void ISBAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ISBAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ISBAction::CopyFrom(const ISBAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ISBAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ISBAction::IsInitialized() const {
  return true;
}

void ISBAction::Swap(ISBAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ISBAction::InternalSwap(ISBAction* other) {
  using std::swap;
  component_.Swap(&other->component_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  action_.Swap(&other->action_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ISBAction::GetMetadata() const {
  protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TimeAndSalesData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimeAndSalesData::kTimestampFieldNumber;
const int TimeAndSalesData::kPriceFieldNumber;
const int TimeAndSalesData::kQuantityFieldNumber;
const int TimeAndSalesData::kTotalVolumeFieldNumber;
const int TimeAndSalesData::kVwapFieldNumber;
const int TimeAndSalesData::kCurrentAskFieldNumber;
const int TimeAndSalesData::kCurrentBidFieldNumber;
const int TimeAndSalesData::kCurrentRtmFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimeAndSalesData::TimeAndSalesData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_TimeAndSalesData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:TimeAndSalesData)
}
TimeAndSalesData::TimeAndSalesData(const TimeAndSalesData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  current_rtm_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.current_rtm().size() > 0) {
    current_rtm_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.current_rtm_);
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&current_bid_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(current_bid_));
  // @@protoc_insertion_point(copy_constructor:TimeAndSalesData)
}

void TimeAndSalesData::SharedCtor() {
  current_rtm_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&current_bid_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(current_bid_));
}

TimeAndSalesData::~TimeAndSalesData() {
  // @@protoc_insertion_point(destructor:TimeAndSalesData)
  SharedDtor();
}

void TimeAndSalesData::SharedDtor() {
  current_rtm_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TimeAndSalesData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TimeAndSalesData::descriptor() {
  ::protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TimeAndSalesData& TimeAndSalesData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_TimeAndSalesData.base);
  return *internal_default_instance();
}


void TimeAndSalesData::Clear() {
// @@protoc_insertion_point(message_clear_start:TimeAndSalesData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  current_rtm_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&current_bid_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(current_bid_));
  _internal_metadata_.Clear();
}

bool TimeAndSalesData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TimeAndSalesData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double price = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double quantity = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &quantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double total_volume = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double vwap = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vwap_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double current_ask = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &current_ask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double current_bid = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &current_bid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string current_rtm = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_current_rtm()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->current_rtm().data(), static_cast<int>(this->current_rtm().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TimeAndSalesData.current_rtm"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TimeAndSalesData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TimeAndSalesData)
  return false;
#undef DO_
}

void TimeAndSalesData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TimeAndSalesData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // double price = 2;
  if (this->price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->price(), output);
  }

  // double quantity = 3;
  if (this->quantity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->quantity(), output);
  }

  // double total_volume = 4;
  if (this->total_volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->total_volume(), output);
  }

  // double vwap = 5;
  if (this->vwap() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->vwap(), output);
  }

  // double current_ask = 6;
  if (this->current_ask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->current_ask(), output);
  }

  // double current_bid = 7;
  if (this->current_bid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->current_bid(), output);
  }

  // string current_rtm = 8;
  if (this->current_rtm().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->current_rtm().data(), static_cast<int>(this->current_rtm().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TimeAndSalesData.current_rtm");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->current_rtm(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:TimeAndSalesData)
}

::google::protobuf::uint8* TimeAndSalesData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TimeAndSalesData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // double price = 2;
  if (this->price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->price(), target);
  }

  // double quantity = 3;
  if (this->quantity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->quantity(), target);
  }

  // double total_volume = 4;
  if (this->total_volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->total_volume(), target);
  }

  // double vwap = 5;
  if (this->vwap() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->vwap(), target);
  }

  // double current_ask = 6;
  if (this->current_ask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->current_ask(), target);
  }

  // double current_bid = 7;
  if (this->current_bid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->current_bid(), target);
  }

  // string current_rtm = 8;
  if (this->current_rtm().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->current_rtm().data(), static_cast<int>(this->current_rtm().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TimeAndSalesData.current_rtm");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->current_rtm(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TimeAndSalesData)
  return target;
}

size_t TimeAndSalesData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TimeAndSalesData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string current_rtm = 8;
  if (this->current_rtm().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->current_rtm());
  }

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // double price = 2;
  if (this->price() != 0) {
    total_size += 1 + 8;
  }

  // double quantity = 3;
  if (this->quantity() != 0) {
    total_size += 1 + 8;
  }

  // double total_volume = 4;
  if (this->total_volume() != 0) {
    total_size += 1 + 8;
  }

  // double vwap = 5;
  if (this->vwap() != 0) {
    total_size += 1 + 8;
  }

  // double current_ask = 6;
  if (this->current_ask() != 0) {
    total_size += 1 + 8;
  }

  // double current_bid = 7;
  if (this->current_bid() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimeAndSalesData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TimeAndSalesData)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeAndSalesData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TimeAndSalesData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TimeAndSalesData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TimeAndSalesData)
    MergeFrom(*source);
  }
}

void TimeAndSalesData::MergeFrom(const TimeAndSalesData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TimeAndSalesData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.current_rtm().size() > 0) {

    current_rtm_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.current_rtm_);
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.price() != 0) {
    set_price(from.price());
  }
  if (from.quantity() != 0) {
    set_quantity(from.quantity());
  }
  if (from.total_volume() != 0) {
    set_total_volume(from.total_volume());
  }
  if (from.vwap() != 0) {
    set_vwap(from.vwap());
  }
  if (from.current_ask() != 0) {
    set_current_ask(from.current_ask());
  }
  if (from.current_bid() != 0) {
    set_current_bid(from.current_bid());
  }
}

void TimeAndSalesData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TimeAndSalesData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeAndSalesData::CopyFrom(const TimeAndSalesData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TimeAndSalesData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeAndSalesData::IsInitialized() const {
  return true;
}

void TimeAndSalesData::Swap(TimeAndSalesData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimeAndSalesData::InternalSwap(TimeAndSalesData* other) {
  using std::swap;
  current_rtm_.Swap(&other->current_rtm_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_, other->timestamp_);
  swap(price_, other->price_);
  swap(quantity_, other->quantity_);
  swap(total_volume_, other->total_volume_);
  swap(vwap_, other->vwap_);
  swap(current_ask_, other->current_ask_);
  swap(current_bid_, other->current_bid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TimeAndSalesData::GetMetadata() const {
  protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TickData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TickData::kTimestampFieldNumber;
const int TickData::kBidPriceFieldNumber;
const int TickData::kBidSizeFieldNumber;
const int TickData::kAskPriceFieldNumber;
const int TickData::kAskSizeFieldNumber;
const int TickData::kLastPriceFieldNumber;
const int TickData::kMarkPriceFieldNumber;
const int TickData::kVolumeFieldNumber;
const int TickData::kImpliedVolFieldNumber;
const int TickData::kDeltaFieldNumber;
const int TickData::kGammaFieldNumber;
const int TickData::kVegaFieldNumber;
const int TickData::kThetaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TickData::TickData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_TickData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:TickData)
}
TickData::TickData(const TickData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&theta_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(theta_));
  // @@protoc_insertion_point(copy_constructor:TickData)
}

void TickData::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&theta_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(theta_));
}

TickData::~TickData() {
  // @@protoc_insertion_point(destructor:TickData)
  SharedDtor();
}

void TickData::SharedDtor() {
}

void TickData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TickData::descriptor() {
  ::protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TickData& TickData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_TickData.base);
  return *internal_default_instance();
}


void TickData::Clear() {
// @@protoc_insertion_point(message_clear_start:TickData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&theta_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(theta_));
  _internal_metadata_.Clear();
}

bool TickData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TickData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double bid_price = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bid_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double bid_size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bid_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double ask_price = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ask_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double ask_size = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ask_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double last_price = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &last_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double mark_price = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mark_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double volume = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double implied_vol = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &implied_vol_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double delta = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &delta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double gamma = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gamma_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double vega = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vega_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double theta = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &theta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TickData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TickData)
  return false;
#undef DO_
}

void TickData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TickData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // double bid_price = 2;
  if (this->bid_price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->bid_price(), output);
  }

  // double bid_size = 3;
  if (this->bid_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->bid_size(), output);
  }

  // double ask_price = 4;
  if (this->ask_price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->ask_price(), output);
  }

  // double ask_size = 5;
  if (this->ask_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->ask_size(), output);
  }

  // double last_price = 6;
  if (this->last_price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->last_price(), output);
  }

  // double mark_price = 7;
  if (this->mark_price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->mark_price(), output);
  }

  // double volume = 8;
  if (this->volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->volume(), output);
  }

  // double implied_vol = 9;
  if (this->implied_vol() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->implied_vol(), output);
  }

  // double delta = 10;
  if (this->delta() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->delta(), output);
  }

  // double gamma = 11;
  if (this->gamma() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->gamma(), output);
  }

  // double vega = 12;
  if (this->vega() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->vega(), output);
  }

  // double theta = 13;
  if (this->theta() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->theta(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:TickData)
}

::google::protobuf::uint8* TickData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TickData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // double bid_price = 2;
  if (this->bid_price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->bid_price(), target);
  }

  // double bid_size = 3;
  if (this->bid_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->bid_size(), target);
  }

  // double ask_price = 4;
  if (this->ask_price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->ask_price(), target);
  }

  // double ask_size = 5;
  if (this->ask_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->ask_size(), target);
  }

  // double last_price = 6;
  if (this->last_price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->last_price(), target);
  }

  // double mark_price = 7;
  if (this->mark_price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->mark_price(), target);
  }

  // double volume = 8;
  if (this->volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->volume(), target);
  }

  // double implied_vol = 9;
  if (this->implied_vol() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->implied_vol(), target);
  }

  // double delta = 10;
  if (this->delta() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->delta(), target);
  }

  // double gamma = 11;
  if (this->gamma() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->gamma(), target);
  }

  // double vega = 12;
  if (this->vega() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->vega(), target);
  }

  // double theta = 13;
  if (this->theta() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->theta(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TickData)
  return target;
}

size_t TickData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TickData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // double bid_price = 2;
  if (this->bid_price() != 0) {
    total_size += 1 + 8;
  }

  // double bid_size = 3;
  if (this->bid_size() != 0) {
    total_size += 1 + 8;
  }

  // double ask_price = 4;
  if (this->ask_price() != 0) {
    total_size += 1 + 8;
  }

  // double ask_size = 5;
  if (this->ask_size() != 0) {
    total_size += 1 + 8;
  }

  // double last_price = 6;
  if (this->last_price() != 0) {
    total_size += 1 + 8;
  }

  // double mark_price = 7;
  if (this->mark_price() != 0) {
    total_size += 1 + 8;
  }

  // double volume = 8;
  if (this->volume() != 0) {
    total_size += 1 + 8;
  }

  // double implied_vol = 9;
  if (this->implied_vol() != 0) {
    total_size += 1 + 8;
  }

  // double delta = 10;
  if (this->delta() != 0) {
    total_size += 1 + 8;
  }

  // double gamma = 11;
  if (this->gamma() != 0) {
    total_size += 1 + 8;
  }

  // double vega = 12;
  if (this->vega() != 0) {
    total_size += 1 + 8;
  }

  // double theta = 13;
  if (this->theta() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TickData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TickData)
  GOOGLE_DCHECK_NE(&from, this);
  const TickData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TickData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TickData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TickData)
    MergeFrom(*source);
  }
}

void TickData::MergeFrom(const TickData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TickData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.bid_price() != 0) {
    set_bid_price(from.bid_price());
  }
  if (from.bid_size() != 0) {
    set_bid_size(from.bid_size());
  }
  if (from.ask_price() != 0) {
    set_ask_price(from.ask_price());
  }
  if (from.ask_size() != 0) {
    set_ask_size(from.ask_size());
  }
  if (from.last_price() != 0) {
    set_last_price(from.last_price());
  }
  if (from.mark_price() != 0) {
    set_mark_price(from.mark_price());
  }
  if (from.volume() != 0) {
    set_volume(from.volume());
  }
  if (from.implied_vol() != 0) {
    set_implied_vol(from.implied_vol());
  }
  if (from.delta() != 0) {
    set_delta(from.delta());
  }
  if (from.gamma() != 0) {
    set_gamma(from.gamma());
  }
  if (from.vega() != 0) {
    set_vega(from.vega());
  }
  if (from.theta() != 0) {
    set_theta(from.theta());
  }
}

void TickData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TickData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TickData::CopyFrom(const TickData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TickData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TickData::IsInitialized() const {
  return true;
}

void TickData::Swap(TickData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TickData::InternalSwap(TickData* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  swap(bid_price_, other->bid_price_);
  swap(bid_size_, other->bid_size_);
  swap(ask_price_, other->ask_price_);
  swap(ask_size_, other->ask_size_);
  swap(last_price_, other->last_price_);
  swap(mark_price_, other->mark_price_);
  swap(volume_, other->volume_);
  swap(implied_vol_, other->implied_vol_);
  swap(delta_, other->delta_);
  swap(gamma_, other->gamma_);
  swap(vega_, other->vega_);
  swap(theta_, other->theta_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TickData::GetMetadata() const {
  protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FiveSecData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FiveSecData::kTimeFieldNumber;
const int FiveSecData::kOpenFieldNumber;
const int FiveSecData::kCloseFieldNumber;
const int FiveSecData::kHighFieldNumber;
const int FiveSecData::kLowFieldNumber;
const int FiveSecData::kVolumeFieldNumber;
const int FiveSecData::kCountFieldNumber;
const int FiveSecData::kRtmFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FiveSecData::FiveSecData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_FiveSecData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:FiveSecData)
}
FiveSecData::FiveSecData(const FiveSecData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  volume_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.volume().size() > 0) {
    volume_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.volume_);
  }
  rtm_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rtm().size() > 0) {
    rtm_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rtm_);
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&time_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:FiveSecData)
}

void FiveSecData::SharedCtor() {
  volume_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rtm_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&time_)) + sizeof(count_));
}

FiveSecData::~FiveSecData() {
  // @@protoc_insertion_point(destructor:FiveSecData)
  SharedDtor();
}

void FiveSecData::SharedDtor() {
  volume_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rtm_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FiveSecData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FiveSecData::descriptor() {
  ::protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FiveSecData& FiveSecData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_FiveSecData.base);
  return *internal_default_instance();
}


void FiveSecData::Clear() {
// @@protoc_insertion_point(message_clear_start:FiveSecData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  volume_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rtm_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&time_)) + sizeof(count_));
  _internal_metadata_.Clear();
}

bool FiveSecData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FiveSecData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double open = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double close = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &close_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double high = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &high_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double low = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &low_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string volume = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_volume()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->volume().data(), static_cast<int>(this->volume().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FiveSecData.volume"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 count = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string rtm = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rtm()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rtm().data(), static_cast<int>(this->rtm().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FiveSecData.rtm"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FiveSecData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FiveSecData)
  return false;
#undef DO_
}

void FiveSecData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FiveSecData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

  // double open = 2;
  if (this->open() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->open(), output);
  }

  // double close = 3;
  if (this->close() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->close(), output);
  }

  // double high = 4;
  if (this->high() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->high(), output);
  }

  // double low = 5;
  if (this->low() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->low(), output);
  }

  // string volume = 6;
  if (this->volume().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->volume().data(), static_cast<int>(this->volume().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FiveSecData.volume");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->volume(), output);
  }

  // int32 count = 7;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->count(), output);
  }

  // string rtm = 8;
  if (this->rtm().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rtm().data(), static_cast<int>(this->rtm().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FiveSecData.rtm");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->rtm(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:FiveSecData)
}

::google::protobuf::uint8* FiveSecData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FiveSecData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }

  // double open = 2;
  if (this->open() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->open(), target);
  }

  // double close = 3;
  if (this->close() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->close(), target);
  }

  // double high = 4;
  if (this->high() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->high(), target);
  }

  // double low = 5;
  if (this->low() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->low(), target);
  }

  // string volume = 6;
  if (this->volume().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->volume().data(), static_cast<int>(this->volume().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FiveSecData.volume");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->volume(), target);
  }

  // int32 count = 7;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->count(), target);
  }

  // string rtm = 8;
  if (this->rtm().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rtm().data(), static_cast<int>(this->rtm().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FiveSecData.rtm");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->rtm(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FiveSecData)
  return target;
}

size_t FiveSecData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FiveSecData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string volume = 6;
  if (this->volume().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->volume());
  }

  // string rtm = 8;
  if (this->rtm().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rtm());
  }

  // int64 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time());
  }

  // double open = 2;
  if (this->open() != 0) {
    total_size += 1 + 8;
  }

  // double close = 3;
  if (this->close() != 0) {
    total_size += 1 + 8;
  }

  // double high = 4;
  if (this->high() != 0) {
    total_size += 1 + 8;
  }

  // double low = 5;
  if (this->low() != 0) {
    total_size += 1 + 8;
  }

  // int32 count = 7;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FiveSecData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FiveSecData)
  GOOGLE_DCHECK_NE(&from, this);
  const FiveSecData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FiveSecData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FiveSecData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FiveSecData)
    MergeFrom(*source);
  }
}

void FiveSecData::MergeFrom(const FiveSecData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FiveSecData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.volume().size() > 0) {

    volume_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.volume_);
  }
  if (from.rtm().size() > 0) {

    rtm_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rtm_);
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.open() != 0) {
    set_open(from.open());
  }
  if (from.close() != 0) {
    set_close(from.close());
  }
  if (from.high() != 0) {
    set_high(from.high());
  }
  if (from.low() != 0) {
    set_low(from.low());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void FiveSecData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FiveSecData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FiveSecData::CopyFrom(const FiveSecData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FiveSecData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FiveSecData::IsInitialized() const {
  return true;
}

void FiveSecData::Swap(FiveSecData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FiveSecData::InternalSwap(FiveSecData* other) {
  using std::swap;
  volume_.Swap(&other->volume_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  rtm_.Swap(&other->rtm_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(time_, other->time_);
  swap(open_, other->open_);
  swap(close_, other->close_);
  swap(high_, other->high_);
  swap(low_, other->low_);
  swap(count_, other->count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FiveSecData::GetMetadata() const {
  protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OneMinData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OneMinData::kTimeFieldNumber;
const int OneMinData::kOpenFieldNumber;
const int OneMinData::kCloseFieldNumber;
const int OneMinData::kHighFieldNumber;
const int OneMinData::kLowFieldNumber;
const int OneMinData::kCandleVolFieldNumber;
const int OneMinData::kTradeCountFieldNumber;
const int OneMinData::kImpliedVolFieldNumber;
const int OneMinData::kDeltaFieldNumber;
const int OneMinData::kGammaFieldNumber;
const int OneMinData::kVegaFieldNumber;
const int OneMinData::kThetaFieldNumber;
const int OneMinData::kUndPriceFieldNumber;
const int OneMinData::kTotalVolFieldNumber;
const int OneMinData::kRtmFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OneMinData::OneMinData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_OneMinData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:OneMinData)
}
OneMinData::OneMinData(const OneMinData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rtm_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rtm().size() > 0) {
    rtm_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rtm_);
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_vol_) -
    reinterpret_cast<char*>(&time_)) + sizeof(total_vol_));
  // @@protoc_insertion_point(copy_constructor:OneMinData)
}

void OneMinData::SharedCtor() {
  rtm_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_vol_) -
      reinterpret_cast<char*>(&time_)) + sizeof(total_vol_));
}

OneMinData::~OneMinData() {
  // @@protoc_insertion_point(destructor:OneMinData)
  SharedDtor();
}

void OneMinData::SharedDtor() {
  rtm_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OneMinData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OneMinData::descriptor() {
  ::protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OneMinData& OneMinData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_OneMinData.base);
  return *internal_default_instance();
}


void OneMinData::Clear() {
// @@protoc_insertion_point(message_clear_start:OneMinData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rtm_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_vol_) -
      reinterpret_cast<char*>(&time_)) + sizeof(total_vol_));
  _internal_metadata_.Clear();
}

bool OneMinData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OneMinData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double open = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double close = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &close_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double high = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &high_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double low = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &low_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double candle_vol = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &candle_vol_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double trade_count = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &trade_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double implied_vol = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &implied_vol_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double delta = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &delta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double gamma = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gamma_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double vega = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vega_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double theta = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &theta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double und_price = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &und_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double total_vol = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_vol_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string rtm = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rtm()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rtm().data(), static_cast<int>(this->rtm().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "OneMinData.rtm"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OneMinData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OneMinData)
  return false;
#undef DO_
}

void OneMinData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OneMinData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

  // double open = 2;
  if (this->open() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->open(), output);
  }

  // double close = 3;
  if (this->close() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->close(), output);
  }

  // double high = 4;
  if (this->high() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->high(), output);
  }

  // double low = 5;
  if (this->low() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->low(), output);
  }

  // double candle_vol = 6;
  if (this->candle_vol() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->candle_vol(), output);
  }

  // double trade_count = 7;
  if (this->trade_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->trade_count(), output);
  }

  // double implied_vol = 8;
  if (this->implied_vol() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->implied_vol(), output);
  }

  // double delta = 9;
  if (this->delta() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->delta(), output);
  }

  // double gamma = 10;
  if (this->gamma() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->gamma(), output);
  }

  // double vega = 11;
  if (this->vega() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->vega(), output);
  }

  // double theta = 12;
  if (this->theta() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->theta(), output);
  }

  // double und_price = 13;
  if (this->und_price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->und_price(), output);
  }

  // double total_vol = 14;
  if (this->total_vol() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->total_vol(), output);
  }

  // string rtm = 15;
  if (this->rtm().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rtm().data(), static_cast<int>(this->rtm().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "OneMinData.rtm");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->rtm(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:OneMinData)
}

::google::protobuf::uint8* OneMinData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OneMinData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }

  // double open = 2;
  if (this->open() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->open(), target);
  }

  // double close = 3;
  if (this->close() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->close(), target);
  }

  // double high = 4;
  if (this->high() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->high(), target);
  }

  // double low = 5;
  if (this->low() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->low(), target);
  }

  // double candle_vol = 6;
  if (this->candle_vol() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->candle_vol(), target);
  }

  // double trade_count = 7;
  if (this->trade_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->trade_count(), target);
  }

  // double implied_vol = 8;
  if (this->implied_vol() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->implied_vol(), target);
  }

  // double delta = 9;
  if (this->delta() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->delta(), target);
  }

  // double gamma = 10;
  if (this->gamma() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->gamma(), target);
  }

  // double vega = 11;
  if (this->vega() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->vega(), target);
  }

  // double theta = 12;
  if (this->theta() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->theta(), target);
  }

  // double und_price = 13;
  if (this->und_price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->und_price(), target);
  }

  // double total_vol = 14;
  if (this->total_vol() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->total_vol(), target);
  }

  // string rtm = 15;
  if (this->rtm().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rtm().data(), static_cast<int>(this->rtm().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "OneMinData.rtm");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->rtm(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OneMinData)
  return target;
}

size_t OneMinData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OneMinData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string rtm = 15;
  if (this->rtm().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rtm());
  }

  // int64 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time());
  }

  // double open = 2;
  if (this->open() != 0) {
    total_size += 1 + 8;
  }

  // double close = 3;
  if (this->close() != 0) {
    total_size += 1 + 8;
  }

  // double high = 4;
  if (this->high() != 0) {
    total_size += 1 + 8;
  }

  // double low = 5;
  if (this->low() != 0) {
    total_size += 1 + 8;
  }

  // double candle_vol = 6;
  if (this->candle_vol() != 0) {
    total_size += 1 + 8;
  }

  // double trade_count = 7;
  if (this->trade_count() != 0) {
    total_size += 1 + 8;
  }

  // double implied_vol = 8;
  if (this->implied_vol() != 0) {
    total_size += 1 + 8;
  }

  // double delta = 9;
  if (this->delta() != 0) {
    total_size += 1 + 8;
  }

  // double gamma = 10;
  if (this->gamma() != 0) {
    total_size += 1 + 8;
  }

  // double vega = 11;
  if (this->vega() != 0) {
    total_size += 1 + 8;
  }

  // double theta = 12;
  if (this->theta() != 0) {
    total_size += 1 + 8;
  }

  // double und_price = 13;
  if (this->und_price() != 0) {
    total_size += 1 + 8;
  }

  // double total_vol = 14;
  if (this->total_vol() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OneMinData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OneMinData)
  GOOGLE_DCHECK_NE(&from, this);
  const OneMinData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OneMinData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OneMinData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OneMinData)
    MergeFrom(*source);
  }
}

void OneMinData::MergeFrom(const OneMinData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OneMinData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rtm().size() > 0) {

    rtm_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rtm_);
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.open() != 0) {
    set_open(from.open());
  }
  if (from.close() != 0) {
    set_close(from.close());
  }
  if (from.high() != 0) {
    set_high(from.high());
  }
  if (from.low() != 0) {
    set_low(from.low());
  }
  if (from.candle_vol() != 0) {
    set_candle_vol(from.candle_vol());
  }
  if (from.trade_count() != 0) {
    set_trade_count(from.trade_count());
  }
  if (from.implied_vol() != 0) {
    set_implied_vol(from.implied_vol());
  }
  if (from.delta() != 0) {
    set_delta(from.delta());
  }
  if (from.gamma() != 0) {
    set_gamma(from.gamma());
  }
  if (from.vega() != 0) {
    set_vega(from.vega());
  }
  if (from.theta() != 0) {
    set_theta(from.theta());
  }
  if (from.und_price() != 0) {
    set_und_price(from.und_price());
  }
  if (from.total_vol() != 0) {
    set_total_vol(from.total_vol());
  }
}

void OneMinData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OneMinData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneMinData::CopyFrom(const OneMinData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OneMinData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneMinData::IsInitialized() const {
  return true;
}

void OneMinData::Swap(OneMinData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OneMinData::InternalSwap(OneMinData* other) {
  using std::swap;
  rtm_.Swap(&other->rtm_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(time_, other->time_);
  swap(open_, other->open_);
  swap(close_, other->close_);
  swap(high_, other->high_);
  swap(low_, other->low_);
  swap(candle_vol_, other->candle_vol_);
  swap(trade_count_, other->trade_count_);
  swap(implied_vol_, other->implied_vol_);
  swap(delta_, other->delta_);
  swap(gamma_, other->gamma_);
  swap(vega_, other->vega_);
  swap(theta_, other->theta_);
  swap(und_price_, other->und_price_);
  swap(total_vol_, other->total_vol_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OneMinData::GetMetadata() const {
  protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OptionData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OptionData::kSymbolFieldNumber;
const int OptionData::kStrikeFieldNumber;
const int OptionData::kRightFieldNumber;
const int OptionData::kExpDateFieldNumber;
const int OptionData::kTicksFieldNumber;
const int OptionData::kFiveSecDataFieldNumber;
const int OptionData::kOneMinDataFieldNumber;
const int OptionData::kTasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OptionData::OptionData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_OptionData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:OptionData)
}
OptionData::OptionData(const OptionData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      ticks_(from.ticks_),
      five_sec_data_(from.five_sec_data_),
      one_min_data_(from.one_min_data_),
      tas_(from.tas_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.symbol().size() > 0) {
    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  right_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.right().size() > 0) {
    right_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.right_);
  }
  exp_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.exp_date().size() > 0) {
    exp_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exp_date_);
  }
  strike_ = from.strike_;
  // @@protoc_insertion_point(copy_constructor:OptionData)
}

void OptionData::SharedCtor() {
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  right_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exp_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strike_ = 0;
}

OptionData::~OptionData() {
  // @@protoc_insertion_point(destructor:OptionData)
  SharedDtor();
}

void OptionData::SharedDtor() {
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  right_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exp_date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OptionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OptionData::descriptor() {
  ::protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OptionData& OptionData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_OptionData.base);
  return *internal_default_instance();
}


void OptionData::Clear() {
// @@protoc_insertion_point(message_clear_start:OptionData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ticks_.Clear();
  five_sec_data_.Clear();
  one_min_data_.Clear();
  tas_.Clear();
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  right_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exp_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strike_ = 0;
  _internal_metadata_.Clear();
}

bool OptionData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OptionData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string symbol = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), static_cast<int>(this->symbol().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "OptionData.symbol"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double strike = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &strike_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string right = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_right()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->right().data(), static_cast<int>(this->right().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "OptionData.right"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string exp_date = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exp_date()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exp_date().data(), static_cast<int>(this->exp_date().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "OptionData.exp_date"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TickData ticks = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_ticks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .FiveSecData five_sec_data = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_five_sec_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .OneMinData one_min_data = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_one_min_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TimeAndSalesData tas = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_tas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OptionData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OptionData)
  return false;
#undef DO_
}

void OptionData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OptionData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "OptionData.symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->symbol(), output);
  }

  // double strike = 2;
  if (this->strike() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->strike(), output);
  }

  // string right = 3;
  if (this->right().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->right().data(), static_cast<int>(this->right().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "OptionData.right");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->right(), output);
  }

  // string exp_date = 4;
  if (this->exp_date().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exp_date().data(), static_cast<int>(this->exp_date().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "OptionData.exp_date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->exp_date(), output);
  }

  // repeated .TickData ticks = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ticks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->ticks(static_cast<int>(i)),
      output);
  }

  // repeated .FiveSecData five_sec_data = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->five_sec_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->five_sec_data(static_cast<int>(i)),
      output);
  }

  // repeated .OneMinData one_min_data = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->one_min_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->one_min_data(static_cast<int>(i)),
      output);
  }

  // repeated .TimeAndSalesData tas = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tas_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->tas(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:OptionData)
}

::google::protobuf::uint8* OptionData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OptionData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "OptionData.symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // double strike = 2;
  if (this->strike() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->strike(), target);
  }

  // string right = 3;
  if (this->right().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->right().data(), static_cast<int>(this->right().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "OptionData.right");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->right(), target);
  }

  // string exp_date = 4;
  if (this->exp_date().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exp_date().data(), static_cast<int>(this->exp_date().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "OptionData.exp_date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->exp_date(), target);
  }

  // repeated .TickData ticks = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ticks_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->ticks(static_cast<int>(i)), deterministic, target);
  }

  // repeated .FiveSecData five_sec_data = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->five_sec_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->five_sec_data(static_cast<int>(i)), deterministic, target);
  }

  // repeated .OneMinData one_min_data = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->one_min_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->one_min_data(static_cast<int>(i)), deterministic, target);
  }

  // repeated .TimeAndSalesData tas = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tas_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->tas(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OptionData)
  return target;
}

size_t OptionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OptionData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .TickData ticks = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->ticks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->ticks(static_cast<int>(i)));
    }
  }

  // repeated .FiveSecData five_sec_data = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->five_sec_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->five_sec_data(static_cast<int>(i)));
    }
  }

  // repeated .OneMinData one_min_data = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->one_min_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->one_min_data(static_cast<int>(i)));
    }
  }

  // repeated .TimeAndSalesData tas = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->tas_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tas(static_cast<int>(i)));
    }
  }

  // string symbol = 1;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  // string right = 3;
  if (this->right().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->right());
  }

  // string exp_date = 4;
  if (this->exp_date().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exp_date());
  }

  // double strike = 2;
  if (this->strike() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OptionData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OptionData)
  GOOGLE_DCHECK_NE(&from, this);
  const OptionData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OptionData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OptionData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OptionData)
    MergeFrom(*source);
  }
}

void OptionData::MergeFrom(const OptionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OptionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ticks_.MergeFrom(from.ticks_);
  five_sec_data_.MergeFrom(from.five_sec_data_);
  one_min_data_.MergeFrom(from.one_min_data_);
  tas_.MergeFrom(from.tas_);
  if (from.symbol().size() > 0) {

    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  if (from.right().size() > 0) {

    right_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.right_);
  }
  if (from.exp_date().size() > 0) {

    exp_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exp_date_);
  }
  if (from.strike() != 0) {
    set_strike(from.strike());
  }
}

void OptionData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OptionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptionData::CopyFrom(const OptionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OptionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionData::IsInitialized() const {
  return true;
}

void OptionData::Swap(OptionData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OptionData::InternalSwap(OptionData* other) {
  using std::swap;
  CastToBase(&ticks_)->InternalSwap(CastToBase(&other->ticks_));
  CastToBase(&five_sec_data_)->InternalSwap(CastToBase(&other->five_sec_data_));
  CastToBase(&one_min_data_)->InternalSwap(CastToBase(&other->one_min_data_));
  CastToBase(&tas_)->InternalSwap(CastToBase(&other->tas_));
  symbol_.Swap(&other->symbol_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  right_.Swap(&other->right_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exp_date_.Swap(&other->exp_date_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(strike_, other->strike_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OptionData::GetMetadata() const {
  protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OptionDataBatch::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OptionDataBatch::kOptionDataPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OptionDataBatch::OptionDataBatch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_OptionDataBatch.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:OptionDataBatch)
}
OptionDataBatch::OptionDataBatch(const OptionDataBatch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      optiondatapoints_(from.optiondatapoints_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:OptionDataBatch)
}

void OptionDataBatch::SharedCtor() {
}

OptionDataBatch::~OptionDataBatch() {
  // @@protoc_insertion_point(destructor:OptionDataBatch)
  SharedDtor();
}

void OptionDataBatch::SharedDtor() {
}

void OptionDataBatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OptionDataBatch::descriptor() {
  ::protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OptionDataBatch& OptionDataBatch::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_OptionDataBatch.base);
  return *internal_default_instance();
}


void OptionDataBatch::Clear() {
// @@protoc_insertion_point(message_clear_start:OptionDataBatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  optiondatapoints_.Clear();
  _internal_metadata_.Clear();
}

bool OptionDataBatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OptionDataBatch)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .OptionData optionDataPoints = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_optiondatapoints()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OptionDataBatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OptionDataBatch)
  return false;
#undef DO_
}

void OptionDataBatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OptionDataBatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .OptionData optionDataPoints = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->optiondatapoints_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->optiondatapoints(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:OptionDataBatch)
}

::google::protobuf::uint8* OptionDataBatch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OptionDataBatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .OptionData optionDataPoints = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->optiondatapoints_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->optiondatapoints(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OptionDataBatch)
  return target;
}

size_t OptionDataBatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OptionDataBatch)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .OptionData optionDataPoints = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->optiondatapoints_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->optiondatapoints(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OptionDataBatch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OptionDataBatch)
  GOOGLE_DCHECK_NE(&from, this);
  const OptionDataBatch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OptionDataBatch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OptionDataBatch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OptionDataBatch)
    MergeFrom(*source);
  }
}

void OptionDataBatch::MergeFrom(const OptionDataBatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OptionDataBatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  optiondatapoints_.MergeFrom(from.optiondatapoints_);
}

void OptionDataBatch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OptionDataBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptionDataBatch::CopyFrom(const OptionDataBatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OptionDataBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionDataBatch::IsInitialized() const {
  return true;
}

void OptionDataBatch::Swap(OptionDataBatch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OptionDataBatch::InternalSwap(OptionDataBatch* other) {
  using std::swap;
  CastToBase(&optiondatapoints_)->InternalSwap(CastToBase(&other->optiondatapoints_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OptionDataBatch::GetMetadata() const {
  protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UnderlyingPriceTick::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnderlyingPriceTick::kTimeFieldNumber;
const int UnderlyingPriceTick::kPriceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnderlyingPriceTick::UnderlyingPriceTick()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_UnderlyingPriceTick.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:UnderlyingPriceTick)
}
UnderlyingPriceTick::UnderlyingPriceTick(const UnderlyingPriceTick& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&price_) -
    reinterpret_cast<char*>(&time_)) + sizeof(price_));
  // @@protoc_insertion_point(copy_constructor:UnderlyingPriceTick)
}

void UnderlyingPriceTick::SharedCtor() {
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&price_) -
      reinterpret_cast<char*>(&time_)) + sizeof(price_));
}

UnderlyingPriceTick::~UnderlyingPriceTick() {
  // @@protoc_insertion_point(destructor:UnderlyingPriceTick)
  SharedDtor();
}

void UnderlyingPriceTick::SharedDtor() {
}

void UnderlyingPriceTick::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UnderlyingPriceTick::descriptor() {
  ::protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UnderlyingPriceTick& UnderlyingPriceTick::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_UnderlyingPriceTick.base);
  return *internal_default_instance();
}


void UnderlyingPriceTick::Clear() {
// @@protoc_insertion_point(message_clear_start:UnderlyingPriceTick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&price_) -
      reinterpret_cast<char*>(&time_)) + sizeof(price_));
  _internal_metadata_.Clear();
}

bool UnderlyingPriceTick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UnderlyingPriceTick)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double price = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UnderlyingPriceTick)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UnderlyingPriceTick)
  return false;
#undef DO_
}

void UnderlyingPriceTick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UnderlyingPriceTick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

  // double price = 2;
  if (this->price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->price(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:UnderlyingPriceTick)
}

::google::protobuf::uint8* UnderlyingPriceTick::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:UnderlyingPriceTick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }

  // double price = 2;
  if (this->price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->price(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UnderlyingPriceTick)
  return target;
}

size_t UnderlyingPriceTick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UnderlyingPriceTick)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time());
  }

  // double price = 2;
  if (this->price() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnderlyingPriceTick::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UnderlyingPriceTick)
  GOOGLE_DCHECK_NE(&from, this);
  const UnderlyingPriceTick* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UnderlyingPriceTick>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UnderlyingPriceTick)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UnderlyingPriceTick)
    MergeFrom(*source);
  }
}

void UnderlyingPriceTick::MergeFrom(const UnderlyingPriceTick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UnderlyingPriceTick)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.price() != 0) {
    set_price(from.price());
  }
}

void UnderlyingPriceTick::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UnderlyingPriceTick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnderlyingPriceTick::CopyFrom(const UnderlyingPriceTick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UnderlyingPriceTick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnderlyingPriceTick::IsInitialized() const {
  return true;
}

void UnderlyingPriceTick::Swap(UnderlyingPriceTick* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnderlyingPriceTick::InternalSwap(UnderlyingPriceTick* other) {
  using std::swap;
  swap(time_, other->time_);
  swap(price_, other->price_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UnderlyingPriceTick::GetMetadata() const {
  protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UnderlyingOneMinData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnderlyingOneMinData::kTimeFieldNumber;
const int UnderlyingOneMinData::kOpenFieldNumber;
const int UnderlyingOneMinData::kHighFieldNumber;
const int UnderlyingOneMinData::kLowFieldNumber;
const int UnderlyingOneMinData::kCloseFieldNumber;
const int UnderlyingOneMinData::kVolumeFieldNumber;
const int UnderlyingOneMinData::kDailyHighFieldNumber;
const int UnderlyingOneMinData::kDailyLowFieldNumber;
const int UnderlyingOneMinData::kDailyVolumeFieldNumber;
const int UnderlyingOneMinData::kTotalCallVolumeFieldNumber;
const int UnderlyingOneMinData::kTotalPutVolumeFieldNumber;
const int UnderlyingOneMinData::kIndexFuturePremiumFieldNumber;
const int UnderlyingOneMinData::kTotalTradeCountFieldNumber;
const int UnderlyingOneMinData::kOneMinuteTradeRateFieldNumber;
const int UnderlyingOneMinData::kRealTimeHistoricalVolatilityFieldNumber;
const int UnderlyingOneMinData::kOptionImpliedVolatilityFieldNumber;
const int UnderlyingOneMinData::kCallOpenInterestFieldNumber;
const int UnderlyingOneMinData::kPutOpenInterestFieldNumber;
const int UnderlyingOneMinData::kFuturesOpenInterestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnderlyingOneMinData::UnderlyingOneMinData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_UnderlyingOneMinData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:UnderlyingOneMinData)
}
UnderlyingOneMinData::UnderlyingOneMinData(const UnderlyingOneMinData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&futures_open_interest_) -
    reinterpret_cast<char*>(&time_)) + sizeof(futures_open_interest_));
  // @@protoc_insertion_point(copy_constructor:UnderlyingOneMinData)
}

void UnderlyingOneMinData::SharedCtor() {
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&futures_open_interest_) -
      reinterpret_cast<char*>(&time_)) + sizeof(futures_open_interest_));
}

UnderlyingOneMinData::~UnderlyingOneMinData() {
  // @@protoc_insertion_point(destructor:UnderlyingOneMinData)
  SharedDtor();
}

void UnderlyingOneMinData::SharedDtor() {
}

void UnderlyingOneMinData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UnderlyingOneMinData::descriptor() {
  ::protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UnderlyingOneMinData& UnderlyingOneMinData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_UnderlyingOneMinData.base);
  return *internal_default_instance();
}


void UnderlyingOneMinData::Clear() {
// @@protoc_insertion_point(message_clear_start:UnderlyingOneMinData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&futures_open_interest_) -
      reinterpret_cast<char*>(&time_)) + sizeof(futures_open_interest_));
  _internal_metadata_.Clear();
}

bool UnderlyingOneMinData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UnderlyingOneMinData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double open = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double high = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &high_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double low = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &low_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double close = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &close_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double volume = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double daily_high = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &daily_high_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double daily_low = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &daily_low_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double daily_volume = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &daily_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double total_call_volume = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_call_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double total_put_volume = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_put_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double index_future_premium = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &index_future_premium_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double total_trade_count = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_trade_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double one_minute_trade_rate = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &one_minute_trade_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double real_time_historical_volatility = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u /* 121 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &real_time_historical_volatility_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double option_implied_volatility = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 129 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &option_implied_volatility_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double call_open_interest = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u /* 137 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &call_open_interest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double put_open_interest = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(145u /* 145 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &put_open_interest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double futures_open_interest = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(153u /* 153 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &futures_open_interest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UnderlyingOneMinData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UnderlyingOneMinData)
  return false;
#undef DO_
}

void UnderlyingOneMinData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UnderlyingOneMinData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

  // double open = 2;
  if (this->open() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->open(), output);
  }

  // double high = 3;
  if (this->high() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->high(), output);
  }

  // double low = 4;
  if (this->low() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->low(), output);
  }

  // double close = 5;
  if (this->close() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->close(), output);
  }

  // double volume = 6;
  if (this->volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->volume(), output);
  }

  // double daily_high = 7;
  if (this->daily_high() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->daily_high(), output);
  }

  // double daily_low = 8;
  if (this->daily_low() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->daily_low(), output);
  }

  // double daily_volume = 9;
  if (this->daily_volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->daily_volume(), output);
  }

  // double total_call_volume = 10;
  if (this->total_call_volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->total_call_volume(), output);
  }

  // double total_put_volume = 11;
  if (this->total_put_volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->total_put_volume(), output);
  }

  // double index_future_premium = 12;
  if (this->index_future_premium() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->index_future_premium(), output);
  }

  // double total_trade_count = 13;
  if (this->total_trade_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->total_trade_count(), output);
  }

  // double one_minute_trade_rate = 14;
  if (this->one_minute_trade_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->one_minute_trade_rate(), output);
  }

  // double real_time_historical_volatility = 15;
  if (this->real_time_historical_volatility() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->real_time_historical_volatility(), output);
  }

  // double option_implied_volatility = 16;
  if (this->option_implied_volatility() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->option_implied_volatility(), output);
  }

  // double call_open_interest = 17;
  if (this->call_open_interest() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->call_open_interest(), output);
  }

  // double put_open_interest = 18;
  if (this->put_open_interest() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->put_open_interest(), output);
  }

  // double futures_open_interest = 19;
  if (this->futures_open_interest() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->futures_open_interest(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:UnderlyingOneMinData)
}

::google::protobuf::uint8* UnderlyingOneMinData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:UnderlyingOneMinData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }

  // double open = 2;
  if (this->open() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->open(), target);
  }

  // double high = 3;
  if (this->high() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->high(), target);
  }

  // double low = 4;
  if (this->low() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->low(), target);
  }

  // double close = 5;
  if (this->close() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->close(), target);
  }

  // double volume = 6;
  if (this->volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->volume(), target);
  }

  // double daily_high = 7;
  if (this->daily_high() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->daily_high(), target);
  }

  // double daily_low = 8;
  if (this->daily_low() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->daily_low(), target);
  }

  // double daily_volume = 9;
  if (this->daily_volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->daily_volume(), target);
  }

  // double total_call_volume = 10;
  if (this->total_call_volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->total_call_volume(), target);
  }

  // double total_put_volume = 11;
  if (this->total_put_volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->total_put_volume(), target);
  }

  // double index_future_premium = 12;
  if (this->index_future_premium() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->index_future_premium(), target);
  }

  // double total_trade_count = 13;
  if (this->total_trade_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->total_trade_count(), target);
  }

  // double one_minute_trade_rate = 14;
  if (this->one_minute_trade_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->one_minute_trade_rate(), target);
  }

  // double real_time_historical_volatility = 15;
  if (this->real_time_historical_volatility() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->real_time_historical_volatility(), target);
  }

  // double option_implied_volatility = 16;
  if (this->option_implied_volatility() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->option_implied_volatility(), target);
  }

  // double call_open_interest = 17;
  if (this->call_open_interest() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->call_open_interest(), target);
  }

  // double put_open_interest = 18;
  if (this->put_open_interest() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->put_open_interest(), target);
  }

  // double futures_open_interest = 19;
  if (this->futures_open_interest() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->futures_open_interest(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UnderlyingOneMinData)
  return target;
}

size_t UnderlyingOneMinData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UnderlyingOneMinData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time());
  }

  // double open = 2;
  if (this->open() != 0) {
    total_size += 1 + 8;
  }

  // double high = 3;
  if (this->high() != 0) {
    total_size += 1 + 8;
  }

  // double low = 4;
  if (this->low() != 0) {
    total_size += 1 + 8;
  }

  // double close = 5;
  if (this->close() != 0) {
    total_size += 1 + 8;
  }

  // double volume = 6;
  if (this->volume() != 0) {
    total_size += 1 + 8;
  }

  // double daily_high = 7;
  if (this->daily_high() != 0) {
    total_size += 1 + 8;
  }

  // double daily_low = 8;
  if (this->daily_low() != 0) {
    total_size += 1 + 8;
  }

  // double daily_volume = 9;
  if (this->daily_volume() != 0) {
    total_size += 1 + 8;
  }

  // double total_call_volume = 10;
  if (this->total_call_volume() != 0) {
    total_size += 1 + 8;
  }

  // double total_put_volume = 11;
  if (this->total_put_volume() != 0) {
    total_size += 1 + 8;
  }

  // double index_future_premium = 12;
  if (this->index_future_premium() != 0) {
    total_size += 1 + 8;
  }

  // double total_trade_count = 13;
  if (this->total_trade_count() != 0) {
    total_size += 1 + 8;
  }

  // double one_minute_trade_rate = 14;
  if (this->one_minute_trade_rate() != 0) {
    total_size += 1 + 8;
  }

  // double real_time_historical_volatility = 15;
  if (this->real_time_historical_volatility() != 0) {
    total_size += 1 + 8;
  }

  // double option_implied_volatility = 16;
  if (this->option_implied_volatility() != 0) {
    total_size += 2 + 8;
  }

  // double call_open_interest = 17;
  if (this->call_open_interest() != 0) {
    total_size += 2 + 8;
  }

  // double put_open_interest = 18;
  if (this->put_open_interest() != 0) {
    total_size += 2 + 8;
  }

  // double futures_open_interest = 19;
  if (this->futures_open_interest() != 0) {
    total_size += 2 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnderlyingOneMinData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UnderlyingOneMinData)
  GOOGLE_DCHECK_NE(&from, this);
  const UnderlyingOneMinData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UnderlyingOneMinData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UnderlyingOneMinData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UnderlyingOneMinData)
    MergeFrom(*source);
  }
}

void UnderlyingOneMinData::MergeFrom(const UnderlyingOneMinData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UnderlyingOneMinData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.open() != 0) {
    set_open(from.open());
  }
  if (from.high() != 0) {
    set_high(from.high());
  }
  if (from.low() != 0) {
    set_low(from.low());
  }
  if (from.close() != 0) {
    set_close(from.close());
  }
  if (from.volume() != 0) {
    set_volume(from.volume());
  }
  if (from.daily_high() != 0) {
    set_daily_high(from.daily_high());
  }
  if (from.daily_low() != 0) {
    set_daily_low(from.daily_low());
  }
  if (from.daily_volume() != 0) {
    set_daily_volume(from.daily_volume());
  }
  if (from.total_call_volume() != 0) {
    set_total_call_volume(from.total_call_volume());
  }
  if (from.total_put_volume() != 0) {
    set_total_put_volume(from.total_put_volume());
  }
  if (from.index_future_premium() != 0) {
    set_index_future_premium(from.index_future_premium());
  }
  if (from.total_trade_count() != 0) {
    set_total_trade_count(from.total_trade_count());
  }
  if (from.one_minute_trade_rate() != 0) {
    set_one_minute_trade_rate(from.one_minute_trade_rate());
  }
  if (from.real_time_historical_volatility() != 0) {
    set_real_time_historical_volatility(from.real_time_historical_volatility());
  }
  if (from.option_implied_volatility() != 0) {
    set_option_implied_volatility(from.option_implied_volatility());
  }
  if (from.call_open_interest() != 0) {
    set_call_open_interest(from.call_open_interest());
  }
  if (from.put_open_interest() != 0) {
    set_put_open_interest(from.put_open_interest());
  }
  if (from.futures_open_interest() != 0) {
    set_futures_open_interest(from.futures_open_interest());
  }
}

void UnderlyingOneMinData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UnderlyingOneMinData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnderlyingOneMinData::CopyFrom(const UnderlyingOneMinData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UnderlyingOneMinData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnderlyingOneMinData::IsInitialized() const {
  return true;
}

void UnderlyingOneMinData::Swap(UnderlyingOneMinData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnderlyingOneMinData::InternalSwap(UnderlyingOneMinData* other) {
  using std::swap;
  swap(time_, other->time_);
  swap(open_, other->open_);
  swap(high_, other->high_);
  swap(low_, other->low_);
  swap(close_, other->close_);
  swap(volume_, other->volume_);
  swap(daily_high_, other->daily_high_);
  swap(daily_low_, other->daily_low_);
  swap(daily_volume_, other->daily_volume_);
  swap(total_call_volume_, other->total_call_volume_);
  swap(total_put_volume_, other->total_put_volume_);
  swap(index_future_premium_, other->index_future_premium_);
  swap(total_trade_count_, other->total_trade_count_);
  swap(one_minute_trade_rate_, other->one_minute_trade_rate_);
  swap(real_time_historical_volatility_, other->real_time_historical_volatility_);
  swap(option_implied_volatility_, other->option_implied_volatility_);
  swap(call_open_interest_, other->call_open_interest_);
  swap(put_open_interest_, other->put_open_interest_);
  swap(futures_open_interest_, other->futures_open_interest_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UnderlyingOneMinData::GetMetadata() const {
  protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UnderlyingAverages::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnderlyingAverages::kLow13WeekFieldNumber;
const int UnderlyingAverages::kHigh13WeekFieldNumber;
const int UnderlyingAverages::kLow26WeekFieldNumber;
const int UnderlyingAverages::kHigh26WeekFieldNumber;
const int UnderlyingAverages::kLow52WeekFieldNumber;
const int UnderlyingAverages::kHigh52WeekFieldNumber;
const int UnderlyingAverages::kAverageVolume90DayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnderlyingAverages::UnderlyingAverages()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_UnderlyingAverages.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:UnderlyingAverages)
}
UnderlyingAverages::UnderlyingAverages(const UnderlyingAverages& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&low_13_week_, &from.low_13_week_,
    static_cast<size_t>(reinterpret_cast<char*>(&average_volume_90_day_) -
    reinterpret_cast<char*>(&low_13_week_)) + sizeof(average_volume_90_day_));
  // @@protoc_insertion_point(copy_constructor:UnderlyingAverages)
}

void UnderlyingAverages::SharedCtor() {
  ::memset(&low_13_week_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&average_volume_90_day_) -
      reinterpret_cast<char*>(&low_13_week_)) + sizeof(average_volume_90_day_));
}

UnderlyingAverages::~UnderlyingAverages() {
  // @@protoc_insertion_point(destructor:UnderlyingAverages)
  SharedDtor();
}

void UnderlyingAverages::SharedDtor() {
}

void UnderlyingAverages::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UnderlyingAverages::descriptor() {
  ::protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UnderlyingAverages& UnderlyingAverages::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_UnderlyingAverages.base);
  return *internal_default_instance();
}


void UnderlyingAverages::Clear() {
// @@protoc_insertion_point(message_clear_start:UnderlyingAverages)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&low_13_week_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&average_volume_90_day_) -
      reinterpret_cast<char*>(&low_13_week_)) + sizeof(average_volume_90_day_));
  _internal_metadata_.Clear();
}

bool UnderlyingAverages::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UnderlyingAverages)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double low_13_week = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &low_13_week_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double high_13_week = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &high_13_week_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double low_26_week = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &low_26_week_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double high_26_week = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &high_26_week_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double low_52_week = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &low_52_week_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double high_52_week = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &high_52_week_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double average_volume_90_day = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &average_volume_90_day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UnderlyingAverages)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UnderlyingAverages)
  return false;
#undef DO_
}

void UnderlyingAverages::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UnderlyingAverages)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double low_13_week = 1;
  if (this->low_13_week() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->low_13_week(), output);
  }

  // double high_13_week = 2;
  if (this->high_13_week() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->high_13_week(), output);
  }

  // double low_26_week = 3;
  if (this->low_26_week() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->low_26_week(), output);
  }

  // double high_26_week = 4;
  if (this->high_26_week() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->high_26_week(), output);
  }

  // double low_52_week = 5;
  if (this->low_52_week() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->low_52_week(), output);
  }

  // double high_52_week = 6;
  if (this->high_52_week() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->high_52_week(), output);
  }

  // double average_volume_90_day = 7;
  if (this->average_volume_90_day() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->average_volume_90_day(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:UnderlyingAverages)
}

::google::protobuf::uint8* UnderlyingAverages::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:UnderlyingAverages)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double low_13_week = 1;
  if (this->low_13_week() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->low_13_week(), target);
  }

  // double high_13_week = 2;
  if (this->high_13_week() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->high_13_week(), target);
  }

  // double low_26_week = 3;
  if (this->low_26_week() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->low_26_week(), target);
  }

  // double high_26_week = 4;
  if (this->high_26_week() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->high_26_week(), target);
  }

  // double low_52_week = 5;
  if (this->low_52_week() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->low_52_week(), target);
  }

  // double high_52_week = 6;
  if (this->high_52_week() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->high_52_week(), target);
  }

  // double average_volume_90_day = 7;
  if (this->average_volume_90_day() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->average_volume_90_day(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UnderlyingAverages)
  return target;
}

size_t UnderlyingAverages::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UnderlyingAverages)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double low_13_week = 1;
  if (this->low_13_week() != 0) {
    total_size += 1 + 8;
  }

  // double high_13_week = 2;
  if (this->high_13_week() != 0) {
    total_size += 1 + 8;
  }

  // double low_26_week = 3;
  if (this->low_26_week() != 0) {
    total_size += 1 + 8;
  }

  // double high_26_week = 4;
  if (this->high_26_week() != 0) {
    total_size += 1 + 8;
  }

  // double low_52_week = 5;
  if (this->low_52_week() != 0) {
    total_size += 1 + 8;
  }

  // double high_52_week = 6;
  if (this->high_52_week() != 0) {
    total_size += 1 + 8;
  }

  // double average_volume_90_day = 7;
  if (this->average_volume_90_day() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnderlyingAverages::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UnderlyingAverages)
  GOOGLE_DCHECK_NE(&from, this);
  const UnderlyingAverages* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UnderlyingAverages>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UnderlyingAverages)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UnderlyingAverages)
    MergeFrom(*source);
  }
}

void UnderlyingAverages::MergeFrom(const UnderlyingAverages& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UnderlyingAverages)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.low_13_week() != 0) {
    set_low_13_week(from.low_13_week());
  }
  if (from.high_13_week() != 0) {
    set_high_13_week(from.high_13_week());
  }
  if (from.low_26_week() != 0) {
    set_low_26_week(from.low_26_week());
  }
  if (from.high_26_week() != 0) {
    set_high_26_week(from.high_26_week());
  }
  if (from.low_52_week() != 0) {
    set_low_52_week(from.low_52_week());
  }
  if (from.high_52_week() != 0) {
    set_high_52_week(from.high_52_week());
  }
  if (from.average_volume_90_day() != 0) {
    set_average_volume_90_day(from.average_volume_90_day());
  }
}

void UnderlyingAverages::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UnderlyingAverages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnderlyingAverages::CopyFrom(const UnderlyingAverages& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UnderlyingAverages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnderlyingAverages::IsInitialized() const {
  return true;
}

void UnderlyingAverages::Swap(UnderlyingAverages* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnderlyingAverages::InternalSwap(UnderlyingAverages* other) {
  using std::swap;
  swap(low_13_week_, other->low_13_week_);
  swap(high_13_week_, other->high_13_week_);
  swap(low_26_week_, other->low_26_week_);
  swap(high_26_week_, other->high_26_week_);
  swap(low_52_week_, other->low_52_week_);
  swap(high_52_week_, other->high_52_week_);
  swap(average_volume_90_day_, other->average_volume_90_day_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UnderlyingAverages::GetMetadata() const {
  protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UnderlyingContract::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnderlyingContract::kSymbolFieldNumber;
const int UnderlyingContract::kUnderlyingOneMinFieldNumber;
const int UnderlyingContract::kUnderlyingAveragesFieldNumber;
const int UnderlyingContract::kUnderlyingPriceTickFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnderlyingContract::UnderlyingContract()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_UnderlyingContract.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:UnderlyingContract)
}
UnderlyingContract::UnderlyingContract(const UnderlyingContract& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      underlying_one_min_(from.underlying_one_min_),
      underlying_averages_(from.underlying_averages_),
      underlying_price_tick_(from.underlying_price_tick_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.symbol().size() > 0) {
    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  // @@protoc_insertion_point(copy_constructor:UnderlyingContract)
}

void UnderlyingContract::SharedCtor() {
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UnderlyingContract::~UnderlyingContract() {
  // @@protoc_insertion_point(destructor:UnderlyingContract)
  SharedDtor();
}

void UnderlyingContract::SharedDtor() {
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UnderlyingContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UnderlyingContract::descriptor() {
  ::protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UnderlyingContract& UnderlyingContract::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_UnderlyingContract.base);
  return *internal_default_instance();
}


void UnderlyingContract::Clear() {
// @@protoc_insertion_point(message_clear_start:UnderlyingContract)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  underlying_one_min_.Clear();
  underlying_averages_.Clear();
  underlying_price_tick_.Clear();
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool UnderlyingContract::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UnderlyingContract)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string symbol = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), static_cast<int>(this->symbol().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "UnderlyingContract.symbol"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .UnderlyingOneMinData underlying_one_min = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_underlying_one_min()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .UnderlyingAverages underlying_averages = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_underlying_averages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .UnderlyingPriceTick underlying_price_tick = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_underlying_price_tick()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UnderlyingContract)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UnderlyingContract)
  return false;
#undef DO_
}

void UnderlyingContract::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UnderlyingContract)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "UnderlyingContract.symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->symbol(), output);
  }

  // repeated .UnderlyingOneMinData underlying_one_min = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->underlying_one_min_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->underlying_one_min(static_cast<int>(i)),
      output);
  }

  // repeated .UnderlyingAverages underlying_averages = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->underlying_averages_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->underlying_averages(static_cast<int>(i)),
      output);
  }

  // repeated .UnderlyingPriceTick underlying_price_tick = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->underlying_price_tick_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->underlying_price_tick(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:UnderlyingContract)
}

::google::protobuf::uint8* UnderlyingContract::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:UnderlyingContract)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "UnderlyingContract.symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // repeated .UnderlyingOneMinData underlying_one_min = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->underlying_one_min_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->underlying_one_min(static_cast<int>(i)), deterministic, target);
  }

  // repeated .UnderlyingAverages underlying_averages = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->underlying_averages_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->underlying_averages(static_cast<int>(i)), deterministic, target);
  }

  // repeated .UnderlyingPriceTick underlying_price_tick = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->underlying_price_tick_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->underlying_price_tick(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UnderlyingContract)
  return target;
}

size_t UnderlyingContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UnderlyingContract)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .UnderlyingOneMinData underlying_one_min = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->underlying_one_min_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->underlying_one_min(static_cast<int>(i)));
    }
  }

  // repeated .UnderlyingAverages underlying_averages = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->underlying_averages_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->underlying_averages(static_cast<int>(i)));
    }
  }

  // repeated .UnderlyingPriceTick underlying_price_tick = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->underlying_price_tick_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->underlying_price_tick(static_cast<int>(i)));
    }
  }

  // string symbol = 1;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnderlyingContract::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UnderlyingContract)
  GOOGLE_DCHECK_NE(&from, this);
  const UnderlyingContract* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UnderlyingContract>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UnderlyingContract)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UnderlyingContract)
    MergeFrom(*source);
  }
}

void UnderlyingContract::MergeFrom(const UnderlyingContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UnderlyingContract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  underlying_one_min_.MergeFrom(from.underlying_one_min_);
  underlying_averages_.MergeFrom(from.underlying_averages_);
  underlying_price_tick_.MergeFrom(from.underlying_price_tick_);
  if (from.symbol().size() > 0) {

    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
}

void UnderlyingContract::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UnderlyingContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnderlyingContract::CopyFrom(const UnderlyingContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UnderlyingContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnderlyingContract::IsInitialized() const {
  return true;
}

void UnderlyingContract::Swap(UnderlyingContract* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnderlyingContract::InternalSwap(UnderlyingContract* other) {
  using std::swap;
  CastToBase(&underlying_one_min_)->InternalSwap(CastToBase(&other->underlying_one_min_));
  CastToBase(&underlying_averages_)->InternalSwap(CastToBase(&other->underlying_averages_));
  CastToBase(&underlying_price_tick_)->InternalSwap(CastToBase(&other->underlying_price_tick_));
  symbol_.Swap(&other->symbol_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UnderlyingContract::GetMetadata() const {
  protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NewsEvent::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NewsEvent::kTimeFieldNumber;
const int NewsEvent::kArticleIdFieldNumber;
const int NewsEvent::kHeadlineFieldNumber;
const int NewsEvent::kSentimentScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NewsEvent::NewsEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_NewsEvent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NewsEvent)
}
NewsEvent::NewsEvent(const NewsEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  article_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.article_id().size() > 0) {
    article_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.article_id_);
  }
  headline_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.headline().size() > 0) {
    headline_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.headline_);
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&sentiment_score_) -
    reinterpret_cast<char*>(&time_)) + sizeof(sentiment_score_));
  // @@protoc_insertion_point(copy_constructor:NewsEvent)
}

void NewsEvent::SharedCtor() {
  article_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headline_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sentiment_score_) -
      reinterpret_cast<char*>(&time_)) + sizeof(sentiment_score_));
}

NewsEvent::~NewsEvent() {
  // @@protoc_insertion_point(destructor:NewsEvent)
  SharedDtor();
}

void NewsEvent::SharedDtor() {
  article_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headline_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NewsEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NewsEvent::descriptor() {
  ::protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NewsEvent& NewsEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_NewsEvent.base);
  return *internal_default_instance();
}


void NewsEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:NewsEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  article_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headline_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sentiment_score_) -
      reinterpret_cast<char*>(&time_)) + sizeof(sentiment_score_));
  _internal_metadata_.Clear();
}

bool NewsEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NewsEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string article_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_article_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->article_id().data(), static_cast<int>(this->article_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NewsEvent.article_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string headline = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headline()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->headline().data(), static_cast<int>(this->headline().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NewsEvent.headline"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double sentiment_score = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sentiment_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NewsEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NewsEvent)
  return false;
#undef DO_
}

void NewsEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NewsEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

  // string article_id = 2;
  if (this->article_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->article_id().data(), static_cast<int>(this->article_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NewsEvent.article_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->article_id(), output);
  }

  // string headline = 3;
  if (this->headline().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->headline().data(), static_cast<int>(this->headline().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NewsEvent.headline");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->headline(), output);
  }

  // double sentiment_score = 4;
  if (this->sentiment_score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->sentiment_score(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NewsEvent)
}

::google::protobuf::uint8* NewsEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NewsEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }

  // string article_id = 2;
  if (this->article_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->article_id().data(), static_cast<int>(this->article_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NewsEvent.article_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->article_id(), target);
  }

  // string headline = 3;
  if (this->headline().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->headline().data(), static_cast<int>(this->headline().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NewsEvent.headline");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->headline(), target);
  }

  // double sentiment_score = 4;
  if (this->sentiment_score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->sentiment_score(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NewsEvent)
  return target;
}

size_t NewsEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NewsEvent)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string article_id = 2;
  if (this->article_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->article_id());
  }

  // string headline = 3;
  if (this->headline().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->headline());
  }

  // int64 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time());
  }

  // double sentiment_score = 4;
  if (this->sentiment_score() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewsEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NewsEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const NewsEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NewsEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NewsEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NewsEvent)
    MergeFrom(*source);
  }
}

void NewsEvent::MergeFrom(const NewsEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NewsEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.article_id().size() > 0) {

    article_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.article_id_);
  }
  if (from.headline().size() > 0) {

    headline_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.headline_);
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.sentiment_score() != 0) {
    set_sentiment_score(from.sentiment_score());
  }
}

void NewsEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NewsEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewsEvent::CopyFrom(const NewsEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NewsEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewsEvent::IsInitialized() const {
  return true;
}

void NewsEvent::Swap(NewsEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NewsEvent::InternalSwap(NewsEvent* other) {
  using std::swap;
  article_id_.Swap(&other->article_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  headline_.Swap(&other->headline_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(time_, other->time_);
  swap(sentiment_score_, other->sentiment_score_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NewsEvent::GetMetadata() const {
  protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Message* Arena::CreateMaybeMessage< ::Message >(Arena* arena) {
  return Arena::CreateInternal< ::Message >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::BasicMessage* Arena::CreateMaybeMessage< ::BasicMessage >(Arena* arena) {
  return Arena::CreateInternal< ::BasicMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Confirmation* Arena::CreateMaybeMessage< ::Confirmation >(Arena* arena) {
  return Arena::CreateInternal< ::Confirmation >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ISBAction* Arena::CreateMaybeMessage< ::ISBAction >(Arena* arena) {
  return Arena::CreateInternal< ::ISBAction >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::TimeAndSalesData* Arena::CreateMaybeMessage< ::TimeAndSalesData >(Arena* arena) {
  return Arena::CreateInternal< ::TimeAndSalesData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::TickData* Arena::CreateMaybeMessage< ::TickData >(Arena* arena) {
  return Arena::CreateInternal< ::TickData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::FiveSecData* Arena::CreateMaybeMessage< ::FiveSecData >(Arena* arena) {
  return Arena::CreateInternal< ::FiveSecData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::OneMinData* Arena::CreateMaybeMessage< ::OneMinData >(Arena* arena) {
  return Arena::CreateInternal< ::OneMinData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::OptionData* Arena::CreateMaybeMessage< ::OptionData >(Arena* arena) {
  return Arena::CreateInternal< ::OptionData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::OptionDataBatch* Arena::CreateMaybeMessage< ::OptionDataBatch >(Arena* arena) {
  return Arena::CreateInternal< ::OptionDataBatch >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::UnderlyingPriceTick* Arena::CreateMaybeMessage< ::UnderlyingPriceTick >(Arena* arena) {
  return Arena::CreateInternal< ::UnderlyingPriceTick >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::UnderlyingOneMinData* Arena::CreateMaybeMessage< ::UnderlyingOneMinData >(Arena* arena) {
  return Arena::CreateInternal< ::UnderlyingOneMinData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::UnderlyingAverages* Arena::CreateMaybeMessage< ::UnderlyingAverages >(Arena* arena) {
  return Arena::CreateInternal< ::UnderlyingAverages >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::UnderlyingContract* Arena::CreateMaybeMessage< ::UnderlyingContract >(Arena* arena) {
  return Arena::CreateInternal< ::UnderlyingContract >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NewsEvent* Arena::CreateMaybeMessage< ::NewsEvent >(Arena* arena) {
  return Arena::CreateInternal< ::NewsEvent >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
